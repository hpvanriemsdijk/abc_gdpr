enum PERMISSION {
  ADMIN
  AUDIT
}

enum RACI {
  RESPONDSABLE
  ACCOUNTABLE
  CONSULTED
  INFORMED
}

enum CLASSIFICATIONOBJECT {
  DATA
  APPLICATION
}

#
# Models
#
type User {
  id: ID! @id
  email: String! @unique
  password: String!
  active: Boolean

  #system fields
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt

  # Relations
  specialPermissions: [PERMISSION!]! @scalarList(strategy: RELATION)
  person: Person @relation(link: INLINE)
}

type Person {
  id: ID! @id
  name: String!
  surname: String
  
  # Relations
  user: User
  roles: [BusinessRole!]!
}

type BusinessRole {
  id: ID! @id
  name: String!
  description: String
   
  # Relations
  raciPrivacy: RACI @scalar(strategy: RELATION)
  raciSecurity: RACI @scalar(strategy: RELATION)
  raciFinancial: RACI @scalar(strategy: RELATION)
  raciExecutive: RACI @scalar(strategy: RELATION)
  person: Person @relation(link: INLINE)
  organizationalUnit: OrganizationalUnit! @relation(link: INLINE)
  process: [Process!]!
  appBusinessOwner: [Application!]! @relation(name: "BusinessRoleAppBusinessOwner")
  appItOwner: [Application!]! @relation(name: "BusinessRoleAppItOwner")
  appSecAdmin: [Application!]! @relation(name: "BusinessRoleAppSecAdmin")
}

type OrganizationalUnit {
  id: ID! @id
  name: String!
  description: String

  #system fields
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  
  # Relations
  children: [OrganizationalUnit!]! @relation(name: "OuToOu", onDelete: CASCADE)
  parent: OrganizationalUnit @relation(link: INLINE, name: "OuToOu")
  processes: [Process!]!
  businessRoles: [BusinessRole!]!
  organizationalUnitType: OrganizationalUnitType @relation(link: INLINE)
  headOffice: Location @relation(onDelete: CASCADE)
}

type OrganizationalUnitType {
  id: ID! @id
  name: String!
  description: String
  reportingUnit: Boolean
  
  # Relations
  organizationalUnit: [OrganizationalUnit!]!
}

##
 # Update AllProcessesByOu resolver when update this type
 # 
type Process {
  id: ID! @id
  name: String!
  description: String

  #system fields
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  
  # Relations
  organizationalUnit: OrganizationalUnit  @relation(link: INLINE)
  processingActivities: [ProcessingActivity!]!
  processOwner: BusinessRole @relation(link: INLINE)
}

type ProcessingActivity {
  id: ID! @id
  name: String!
  purpose: String!
  imController: Boolean
  securityMeasures: String
  legalGroundComment: String 
  profiling: Boolean
  publicSource: Boolean
  linkToDpia: String
  linkToLia: String

  #system fields
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  
  # Relations
  recipients: [BusinessPartner!]! @relation(link: TABLE, name:"ProcessingActivityRecipients")
  controllers: [BusinessPartner!]! @relation(link: TABLE, name:"ProcessingActivityControllers")
  dataTypes: [DataType!]!
  processingTypes: [ProcessingType!]!
  legalGrounds: [LegalGround!]!
  process: Process @relation(link: INLINE)
}

type Application {
  id: ID! @id
  name: String!
  alias: Json
  description: String
  
  # Relations
  processingActivities: [ProcessingActivity!]!
  dataTypes: [DataType!]! @relation(link: TABLE)
  businessOwner: BusinessRole @relation(link: INLINE, name: "BusinessRoleAppBusinessOwner")
  itOwner: BusinessRole @relation(link: INLINE, name: "BusinessRoleAppItOwner")
  securityAdministrator: BusinessRole @relation(link: INLINE, name: "BusinessRoleAppSecAdmin")
}

type DataType {
  id: ID! @id
  name: String!
  description: String
  
  # Relations
  retentionPolicy: [RetentionPolicy]!
  dataSubjectType: [DataSubjectType!]!
  application: [Application!]! 
  classificationLabels: [ClassificationLabel!]! 
}

type DataSubjectType {
  id: ID! @id
  name: String!
  description: String
  
  # Relations
  dataTypes: [DataType!]!
}

type QualityAttribute {
  id: ID! @id
  name: String!
  description: String 
  appliesToObject: CLASSIFICATIONOBJECT! @scalar(strategy: RELATION)

  # Relations
  classificationLabels: [ClassificationLabel!]! @relation(onDelete: CASCADE)
}

type ClassificationLabel {
  id: ID! @id
  score: Int!
  label: String!
  criteria: String

  # Relations
  qualityAttribute: QualityAttribute @relation(link: INLINE)
  dataType: [DataType!]! @relation(link: TABLE)
}

type BusinessPartner {
  id: ID! @id
  name: String!
  description: String
  contactDetails: String!
  dpo: String!
  representative: BusinessPartner
  processingTypes: [ProcessingType!]!
  recipientsType: RecipientsType
  securityMeasures: String
  otherCountries: Json
  outsideEea: Boolean
  safeguards: String
  linkToDpa: String

  # Relations
  headOffice: Location! @relation(onDelete: CASCADE)
}

type Location {
  id: ID! @id
  name: String! 
  description: String
  address: String!

  # Relations
  businessPartner: BusinessPartner @relation(link: INLINE)
  organizationalUnit: OrganizationalUnit @relation(link: INLINE)
}

type LegalGround {
  id: ID! @id
  name: String! 
  description: String
  specialCategoryCondition: Boolean
}

## Simple types ##
type ProcessingType {
  id: ID! @id
  name: String! 
  description: String
}

type RecipientsType {
  id: ID! @id
  name: String! 
  description: String
}

type RetentionPolicy {
  id: ID! @id
  name: String! 
  description: String
}