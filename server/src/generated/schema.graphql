### This file was autogenerated by Nexus 0.11.7
### Do not make changes to this file directly


type AggregateApplication {
  count: Int!
}

type AggregateBusinessRole {
  count: Int!
}

type AggregateClassificationLabel {
  count: Int!
}

type AggregateDataType {
  count: Int!
}

type AggregateLocation {
  count: Int!
}

type AggregateOrganization {
  count: Int!
}

type AggregateOrganizationalUnit {
  count: Int!
}

type AggregateOrganizationalUnitType {
  count: Int!
}

type AggregatePerson {
  count: Int!
}

type AggregateProcess {
  count: Int!
}

type AggregateProcessingActivity {
  count: Int!
}

type AggregateQualityAttribute {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Application {
  alias: Json
  businessOwner: BusinessRole
  dataTypes(after: String, before: String, first: Int, last: Int, orderBy: DataTypeOrderByInput, skip: Int, where: DataTypeWhereInput): [DataType!]
  description: String
  id: ID!
  itOwner: BusinessRole
  name: String!
  processingActivities(after: String, before: String, first: Int, last: Int, orderBy: ProcessingActivityOrderByInput, skip: Int, where: ProcessingActivityWhereInput): [ProcessingActivity!]
  securityAdministrator: BusinessRole
}

type ApplicationConnection {
  aggregate: AggregateApplication!
  edges: [ApplicationEdge!]!
  pageInfo: PageInfo!
}

input ApplicationCreateInput {
  alias: Json
  businessOwner: BusinessRoleCreateOneWithoutAppBusinessOwnerInput
  dataTypes: DataTypeCreateManyWithoutApplicationInput
  description: String
  id: ID
  itOwner: BusinessRoleCreateOneWithoutAppItOwnerInput
  name: String!
  processingActivities: ProcessingActivityCreateManyWithoutApplicationsInput
  securityAdministrator: BusinessRoleCreateOneWithoutAppSecAdminInput
}

input ApplicationCreateManyWithoutBusinessOwnerInput {
  connect: [ApplicationWhereUniqueInput!]
  create: [ApplicationCreateWithoutBusinessOwnerInput!]
}

input ApplicationCreateManyWithoutDataTypesInput {
  connect: [ApplicationWhereUniqueInput!]
  create: [ApplicationCreateWithoutDataTypesInput!]
}

input ApplicationCreateManyWithoutItOwnerInput {
  connect: [ApplicationWhereUniqueInput!]
  create: [ApplicationCreateWithoutItOwnerInput!]
}

input ApplicationCreateManyWithoutProcessingActivitiesInput {
  connect: [ApplicationWhereUniqueInput!]
  create: [ApplicationCreateWithoutProcessingActivitiesInput!]
}

input ApplicationCreateManyWithoutSecurityAdministratorInput {
  connect: [ApplicationWhereUniqueInput!]
  create: [ApplicationCreateWithoutSecurityAdministratorInput!]
}

input ApplicationCreateWithoutBusinessOwnerInput {
  alias: Json
  dataTypes: DataTypeCreateManyWithoutApplicationInput
  description: String
  id: ID
  itOwner: BusinessRoleCreateOneWithoutAppItOwnerInput
  name: String!
  processingActivities: ProcessingActivityCreateManyWithoutApplicationsInput
  securityAdministrator: BusinessRoleCreateOneWithoutAppSecAdminInput
}

input ApplicationCreateWithoutDataTypesInput {
  alias: Json
  businessOwner: BusinessRoleCreateOneWithoutAppBusinessOwnerInput
  description: String
  id: ID
  itOwner: BusinessRoleCreateOneWithoutAppItOwnerInput
  name: String!
  processingActivities: ProcessingActivityCreateManyWithoutApplicationsInput
  securityAdministrator: BusinessRoleCreateOneWithoutAppSecAdminInput
}

input ApplicationCreateWithoutItOwnerInput {
  alias: Json
  businessOwner: BusinessRoleCreateOneWithoutAppBusinessOwnerInput
  dataTypes: DataTypeCreateManyWithoutApplicationInput
  description: String
  id: ID
  name: String!
  processingActivities: ProcessingActivityCreateManyWithoutApplicationsInput
  securityAdministrator: BusinessRoleCreateOneWithoutAppSecAdminInput
}

input ApplicationCreateWithoutProcessingActivitiesInput {
  alias: Json
  businessOwner: BusinessRoleCreateOneWithoutAppBusinessOwnerInput
  dataTypes: DataTypeCreateManyWithoutApplicationInput
  description: String
  id: ID
  itOwner: BusinessRoleCreateOneWithoutAppItOwnerInput
  name: String!
  securityAdministrator: BusinessRoleCreateOneWithoutAppSecAdminInput
}

input ApplicationCreateWithoutSecurityAdministratorInput {
  alias: Json
  businessOwner: BusinessRoleCreateOneWithoutAppBusinessOwnerInput
  dataTypes: DataTypeCreateManyWithoutApplicationInput
  description: String
  id: ID
  itOwner: BusinessRoleCreateOneWithoutAppItOwnerInput
  name: String!
  processingActivities: ProcessingActivityCreateManyWithoutApplicationsInput
}

type ApplicationEdge {
  cursor: String!
  node: Application!
}

enum ApplicationOrderByInput {
  alias_ASC
  alias_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ApplicationScalarWhereInput {
  AND: [ApplicationScalarWhereInput!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ApplicationScalarWhereInput!]
  OR: [ApplicationScalarWhereInput!]
}

input ApplicationUpdateInput {
  alias: Json
  businessOwner: BusinessRoleUpdateOneWithoutAppBusinessOwnerInput
  dataTypes: DataTypeUpdateManyWithoutApplicationInput
  description: String
  itOwner: BusinessRoleUpdateOneWithoutAppItOwnerInput
  name: String
  processingActivities: ProcessingActivityUpdateManyWithoutApplicationsInput
  securityAdministrator: BusinessRoleUpdateOneWithoutAppSecAdminInput
}

input ApplicationUpdateManyDataInput {
  alias: Json
  description: String
  name: String
}

input ApplicationUpdateManyMutationInput {
  alias: Json
  description: String
  name: String
}

input ApplicationUpdateManyWithoutBusinessOwnerInput {
  connect: [ApplicationWhereUniqueInput!]
  create: [ApplicationCreateWithoutBusinessOwnerInput!]
  delete: [ApplicationWhereUniqueInput!]
  deleteMany: [ApplicationScalarWhereInput!]
  disconnect: [ApplicationWhereUniqueInput!]
  set: [ApplicationWhereUniqueInput!]
  update: [ApplicationUpdateWithWhereUniqueWithoutBusinessOwnerInput!]
  updateMany: [ApplicationUpdateManyWithWhereNestedInput!]
  upsert: [ApplicationUpsertWithWhereUniqueWithoutBusinessOwnerInput!]
}

input ApplicationUpdateManyWithoutDataTypesInput {
  connect: [ApplicationWhereUniqueInput!]
  create: [ApplicationCreateWithoutDataTypesInput!]
  delete: [ApplicationWhereUniqueInput!]
  deleteMany: [ApplicationScalarWhereInput!]
  disconnect: [ApplicationWhereUniqueInput!]
  set: [ApplicationWhereUniqueInput!]
  update: [ApplicationUpdateWithWhereUniqueWithoutDataTypesInput!]
  updateMany: [ApplicationUpdateManyWithWhereNestedInput!]
  upsert: [ApplicationUpsertWithWhereUniqueWithoutDataTypesInput!]
}

input ApplicationUpdateManyWithoutItOwnerInput {
  connect: [ApplicationWhereUniqueInput!]
  create: [ApplicationCreateWithoutItOwnerInput!]
  delete: [ApplicationWhereUniqueInput!]
  deleteMany: [ApplicationScalarWhereInput!]
  disconnect: [ApplicationWhereUniqueInput!]
  set: [ApplicationWhereUniqueInput!]
  update: [ApplicationUpdateWithWhereUniqueWithoutItOwnerInput!]
  updateMany: [ApplicationUpdateManyWithWhereNestedInput!]
  upsert: [ApplicationUpsertWithWhereUniqueWithoutItOwnerInput!]
}

input ApplicationUpdateManyWithoutProcessingActivitiesInput {
  connect: [ApplicationWhereUniqueInput!]
  create: [ApplicationCreateWithoutProcessingActivitiesInput!]
  delete: [ApplicationWhereUniqueInput!]
  deleteMany: [ApplicationScalarWhereInput!]
  disconnect: [ApplicationWhereUniqueInput!]
  set: [ApplicationWhereUniqueInput!]
  update: [ApplicationUpdateWithWhereUniqueWithoutProcessingActivitiesInput!]
  updateMany: [ApplicationUpdateManyWithWhereNestedInput!]
  upsert: [ApplicationUpsertWithWhereUniqueWithoutProcessingActivitiesInput!]
}

input ApplicationUpdateManyWithoutSecurityAdministratorInput {
  connect: [ApplicationWhereUniqueInput!]
  create: [ApplicationCreateWithoutSecurityAdministratorInput!]
  delete: [ApplicationWhereUniqueInput!]
  deleteMany: [ApplicationScalarWhereInput!]
  disconnect: [ApplicationWhereUniqueInput!]
  set: [ApplicationWhereUniqueInput!]
  update: [ApplicationUpdateWithWhereUniqueWithoutSecurityAdministratorInput!]
  updateMany: [ApplicationUpdateManyWithWhereNestedInput!]
  upsert: [ApplicationUpsertWithWhereUniqueWithoutSecurityAdministratorInput!]
}

input ApplicationUpdateManyWithWhereNestedInput {
  data: ApplicationUpdateManyDataInput!
  where: ApplicationScalarWhereInput!
}

input ApplicationUpdateWithoutBusinessOwnerDataInput {
  alias: Json
  dataTypes: DataTypeUpdateManyWithoutApplicationInput
  description: String
  itOwner: BusinessRoleUpdateOneWithoutAppItOwnerInput
  name: String
  processingActivities: ProcessingActivityUpdateManyWithoutApplicationsInput
  securityAdministrator: BusinessRoleUpdateOneWithoutAppSecAdminInput
}

input ApplicationUpdateWithoutDataTypesDataInput {
  alias: Json
  businessOwner: BusinessRoleUpdateOneWithoutAppBusinessOwnerInput
  description: String
  itOwner: BusinessRoleUpdateOneWithoutAppItOwnerInput
  name: String
  processingActivities: ProcessingActivityUpdateManyWithoutApplicationsInput
  securityAdministrator: BusinessRoleUpdateOneWithoutAppSecAdminInput
}

input ApplicationUpdateWithoutItOwnerDataInput {
  alias: Json
  businessOwner: BusinessRoleUpdateOneWithoutAppBusinessOwnerInput
  dataTypes: DataTypeUpdateManyWithoutApplicationInput
  description: String
  name: String
  processingActivities: ProcessingActivityUpdateManyWithoutApplicationsInput
  securityAdministrator: BusinessRoleUpdateOneWithoutAppSecAdminInput
}

input ApplicationUpdateWithoutProcessingActivitiesDataInput {
  alias: Json
  businessOwner: BusinessRoleUpdateOneWithoutAppBusinessOwnerInput
  dataTypes: DataTypeUpdateManyWithoutApplicationInput
  description: String
  itOwner: BusinessRoleUpdateOneWithoutAppItOwnerInput
  name: String
  securityAdministrator: BusinessRoleUpdateOneWithoutAppSecAdminInput
}

input ApplicationUpdateWithoutSecurityAdministratorDataInput {
  alias: Json
  businessOwner: BusinessRoleUpdateOneWithoutAppBusinessOwnerInput
  dataTypes: DataTypeUpdateManyWithoutApplicationInput
  description: String
  itOwner: BusinessRoleUpdateOneWithoutAppItOwnerInput
  name: String
  processingActivities: ProcessingActivityUpdateManyWithoutApplicationsInput
}

input ApplicationUpdateWithWhereUniqueWithoutBusinessOwnerInput {
  data: ApplicationUpdateWithoutBusinessOwnerDataInput!
  where: ApplicationWhereUniqueInput!
}

input ApplicationUpdateWithWhereUniqueWithoutDataTypesInput {
  data: ApplicationUpdateWithoutDataTypesDataInput!
  where: ApplicationWhereUniqueInput!
}

input ApplicationUpdateWithWhereUniqueWithoutItOwnerInput {
  data: ApplicationUpdateWithoutItOwnerDataInput!
  where: ApplicationWhereUniqueInput!
}

input ApplicationUpdateWithWhereUniqueWithoutProcessingActivitiesInput {
  data: ApplicationUpdateWithoutProcessingActivitiesDataInput!
  where: ApplicationWhereUniqueInput!
}

input ApplicationUpdateWithWhereUniqueWithoutSecurityAdministratorInput {
  data: ApplicationUpdateWithoutSecurityAdministratorDataInput!
  where: ApplicationWhereUniqueInput!
}

input ApplicationUpsertWithWhereUniqueWithoutBusinessOwnerInput {
  create: ApplicationCreateWithoutBusinessOwnerInput!
  update: ApplicationUpdateWithoutBusinessOwnerDataInput!
  where: ApplicationWhereUniqueInput!
}

input ApplicationUpsertWithWhereUniqueWithoutDataTypesInput {
  create: ApplicationCreateWithoutDataTypesInput!
  update: ApplicationUpdateWithoutDataTypesDataInput!
  where: ApplicationWhereUniqueInput!
}

input ApplicationUpsertWithWhereUniqueWithoutItOwnerInput {
  create: ApplicationCreateWithoutItOwnerInput!
  update: ApplicationUpdateWithoutItOwnerDataInput!
  where: ApplicationWhereUniqueInput!
}

input ApplicationUpsertWithWhereUniqueWithoutProcessingActivitiesInput {
  create: ApplicationCreateWithoutProcessingActivitiesInput!
  update: ApplicationUpdateWithoutProcessingActivitiesDataInput!
  where: ApplicationWhereUniqueInput!
}

input ApplicationUpsertWithWhereUniqueWithoutSecurityAdministratorInput {
  create: ApplicationCreateWithoutSecurityAdministratorInput!
  update: ApplicationUpdateWithoutSecurityAdministratorDataInput!
  where: ApplicationWhereUniqueInput!
}

input ApplicationWhereInput {
  AND: [ApplicationWhereInput!]
  businessOwner: BusinessRoleWhereInput
  dataTypes_every: DataTypeWhereInput
  dataTypes_none: DataTypeWhereInput
  dataTypes_some: DataTypeWhereInput
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  itOwner: BusinessRoleWhereInput
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ApplicationWhereInput!]
  OR: [ApplicationWhereInput!]
  processingActivities_every: ProcessingActivityWhereInput
  processingActivities_none: ProcessingActivityWhereInput
  processingActivities_some: ProcessingActivityWhereInput
  securityAdministrator: BusinessRoleWhereInput
}

input ApplicationWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

type BusinessRole {
  appBusinessOwner(after: String, before: String, first: Int, last: Int, orderBy: ApplicationOrderByInput, skip: Int, where: ApplicationWhereInput): [Application!]
  appItOwner(after: String, before: String, first: Int, last: Int, orderBy: ApplicationOrderByInput, skip: Int, where: ApplicationWhereInput): [Application!]
  appSecAdmin(after: String, before: String, first: Int, last: Int, orderBy: ApplicationOrderByInput, skip: Int, where: ApplicationWhereInput): [Application!]
  description: String
  id: ID!
  name: String!
  organizationalUnit: OrganizationalUnit!
  person: Person
  process(after: String, before: String, first: Int, last: Int, orderBy: ProcessOrderByInput, skip: Int, where: ProcessWhereInput): [Process!]
  raciExecutive: RACI
  raciFinancial: RACI
  raciPrivacy: RACI
  raciSecurity: RACI
}

type BusinessRoleConnection {
  aggregate: AggregateBusinessRole!
  edges: [BusinessRoleEdge!]!
  pageInfo: PageInfo!
}

input BusinessRoleCreateInput {
  appBusinessOwner: ApplicationCreateManyWithoutBusinessOwnerInput
  appItOwner: ApplicationCreateManyWithoutItOwnerInput
  appSecAdmin: ApplicationCreateManyWithoutSecurityAdministratorInput
  description: String
  id: ID
  name: String!
  organizationalUnit: OrganizationalUnitCreateOneWithoutBusinessRolesInput!
  person: PersonCreateOneWithoutRolesInput
  process: ProcessCreateManyWithoutProcessOwnerInput
  raciExecutive: RACI
  raciFinancial: RACI
  raciPrivacy: RACI
  raciSecurity: RACI
}

input BusinessRoleCreateManyWithoutOrganizationalUnitInput {
  connect: [BusinessRoleWhereUniqueInput!]
  create: [BusinessRoleCreateWithoutOrganizationalUnitInput!]
}

input BusinessRoleCreateManyWithoutPersonInput {
  connect: [BusinessRoleWhereUniqueInput!]
  create: [BusinessRoleCreateWithoutPersonInput!]
}

input BusinessRoleCreateOneWithoutAppBusinessOwnerInput {
  connect: BusinessRoleWhereUniqueInput
  create: BusinessRoleCreateWithoutAppBusinessOwnerInput
}

input BusinessRoleCreateOneWithoutAppItOwnerInput {
  connect: BusinessRoleWhereUniqueInput
  create: BusinessRoleCreateWithoutAppItOwnerInput
}

input BusinessRoleCreateOneWithoutAppSecAdminInput {
  connect: BusinessRoleWhereUniqueInput
  create: BusinessRoleCreateWithoutAppSecAdminInput
}

input BusinessRoleCreateOneWithoutProcessInput {
  connect: BusinessRoleWhereUniqueInput
  create: BusinessRoleCreateWithoutProcessInput
}

input BusinessRoleCreateWithoutAppBusinessOwnerInput {
  appItOwner: ApplicationCreateManyWithoutItOwnerInput
  appSecAdmin: ApplicationCreateManyWithoutSecurityAdministratorInput
  description: String
  id: ID
  name: String!
  organizationalUnit: OrganizationalUnitCreateOneWithoutBusinessRolesInput!
  person: PersonCreateOneWithoutRolesInput
  process: ProcessCreateManyWithoutProcessOwnerInput
  raciExecutive: RACI
  raciFinancial: RACI
  raciPrivacy: RACI
  raciSecurity: RACI
}

input BusinessRoleCreateWithoutAppItOwnerInput {
  appBusinessOwner: ApplicationCreateManyWithoutBusinessOwnerInput
  appSecAdmin: ApplicationCreateManyWithoutSecurityAdministratorInput
  description: String
  id: ID
  name: String!
  organizationalUnit: OrganizationalUnitCreateOneWithoutBusinessRolesInput!
  person: PersonCreateOneWithoutRolesInput
  process: ProcessCreateManyWithoutProcessOwnerInput
  raciExecutive: RACI
  raciFinancial: RACI
  raciPrivacy: RACI
  raciSecurity: RACI
}

input BusinessRoleCreateWithoutAppSecAdminInput {
  appBusinessOwner: ApplicationCreateManyWithoutBusinessOwnerInput
  appItOwner: ApplicationCreateManyWithoutItOwnerInput
  description: String
  id: ID
  name: String!
  organizationalUnit: OrganizationalUnitCreateOneWithoutBusinessRolesInput!
  person: PersonCreateOneWithoutRolesInput
  process: ProcessCreateManyWithoutProcessOwnerInput
  raciExecutive: RACI
  raciFinancial: RACI
  raciPrivacy: RACI
  raciSecurity: RACI
}

input BusinessRoleCreateWithoutOrganizationalUnitInput {
  appBusinessOwner: ApplicationCreateManyWithoutBusinessOwnerInput
  appItOwner: ApplicationCreateManyWithoutItOwnerInput
  appSecAdmin: ApplicationCreateManyWithoutSecurityAdministratorInput
  description: String
  id: ID
  name: String!
  person: PersonCreateOneWithoutRolesInput
  process: ProcessCreateManyWithoutProcessOwnerInput
  raciExecutive: RACI
  raciFinancial: RACI
  raciPrivacy: RACI
  raciSecurity: RACI
}

input BusinessRoleCreateWithoutPersonInput {
  appBusinessOwner: ApplicationCreateManyWithoutBusinessOwnerInput
  appItOwner: ApplicationCreateManyWithoutItOwnerInput
  appSecAdmin: ApplicationCreateManyWithoutSecurityAdministratorInput
  description: String
  id: ID
  name: String!
  organizationalUnit: OrganizationalUnitCreateOneWithoutBusinessRolesInput!
  process: ProcessCreateManyWithoutProcessOwnerInput
  raciExecutive: RACI
  raciFinancial: RACI
  raciPrivacy: RACI
  raciSecurity: RACI
}

input BusinessRoleCreateWithoutProcessInput {
  appBusinessOwner: ApplicationCreateManyWithoutBusinessOwnerInput
  appItOwner: ApplicationCreateManyWithoutItOwnerInput
  appSecAdmin: ApplicationCreateManyWithoutSecurityAdministratorInput
  description: String
  id: ID
  name: String!
  organizationalUnit: OrganizationalUnitCreateOneWithoutBusinessRolesInput!
  person: PersonCreateOneWithoutRolesInput
  raciExecutive: RACI
  raciFinancial: RACI
  raciPrivacy: RACI
  raciSecurity: RACI
}

type BusinessRoleEdge {
  cursor: String!
  node: BusinessRole!
}

enum BusinessRoleOrderByInput {
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  raciExecutive_ASC
  raciExecutive_DESC
  raciFinancial_ASC
  raciFinancial_DESC
  raciPrivacy_ASC
  raciPrivacy_DESC
  raciSecurity_ASC
  raciSecurity_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input BusinessRoleScalarWhereInput {
  AND: [BusinessRoleScalarWhereInput!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [BusinessRoleScalarWhereInput!]
  OR: [BusinessRoleScalarWhereInput!]
  raciExecutive: RACI
  raciExecutive_in: [RACI!]
  raciExecutive_not: RACI
  raciExecutive_not_in: [RACI!]
  raciFinancial: RACI
  raciFinancial_in: [RACI!]
  raciFinancial_not: RACI
  raciFinancial_not_in: [RACI!]
  raciPrivacy: RACI
  raciPrivacy_in: [RACI!]
  raciPrivacy_not: RACI
  raciPrivacy_not_in: [RACI!]
  raciSecurity: RACI
  raciSecurity_in: [RACI!]
  raciSecurity_not: RACI
  raciSecurity_not_in: [RACI!]
}

input BusinessRoleUpdateInput {
  appBusinessOwner: ApplicationUpdateManyWithoutBusinessOwnerInput
  appItOwner: ApplicationUpdateManyWithoutItOwnerInput
  appSecAdmin: ApplicationUpdateManyWithoutSecurityAdministratorInput
  description: String
  name: String
  organizationalUnit: OrganizationalUnitUpdateOneRequiredWithoutBusinessRolesInput
  person: PersonUpdateOneWithoutRolesInput
  process: ProcessUpdateManyWithoutProcessOwnerInput
  raciExecutive: RACI
  raciFinancial: RACI
  raciPrivacy: RACI
  raciSecurity: RACI
}

input BusinessRoleUpdateManyDataInput {
  description: String
  name: String
  raciExecutive: RACI
  raciFinancial: RACI
  raciPrivacy: RACI
  raciSecurity: RACI
}

input BusinessRoleUpdateManyMutationInput {
  description: String
  name: String
  raciExecutive: RACI
  raciFinancial: RACI
  raciPrivacy: RACI
  raciSecurity: RACI
}

input BusinessRoleUpdateManyWithoutOrganizationalUnitInput {
  connect: [BusinessRoleWhereUniqueInput!]
  create: [BusinessRoleCreateWithoutOrganizationalUnitInput!]
  delete: [BusinessRoleWhereUniqueInput!]
  deleteMany: [BusinessRoleScalarWhereInput!]
  disconnect: [BusinessRoleWhereUniqueInput!]
  set: [BusinessRoleWhereUniqueInput!]
  update: [BusinessRoleUpdateWithWhereUniqueWithoutOrganizationalUnitInput!]
  updateMany: [BusinessRoleUpdateManyWithWhereNestedInput!]
  upsert: [BusinessRoleUpsertWithWhereUniqueWithoutOrganizationalUnitInput!]
}

input BusinessRoleUpdateManyWithoutPersonInput {
  connect: [BusinessRoleWhereUniqueInput!]
  create: [BusinessRoleCreateWithoutPersonInput!]
  delete: [BusinessRoleWhereUniqueInput!]
  deleteMany: [BusinessRoleScalarWhereInput!]
  disconnect: [BusinessRoleWhereUniqueInput!]
  set: [BusinessRoleWhereUniqueInput!]
  update: [BusinessRoleUpdateWithWhereUniqueWithoutPersonInput!]
  updateMany: [BusinessRoleUpdateManyWithWhereNestedInput!]
  upsert: [BusinessRoleUpsertWithWhereUniqueWithoutPersonInput!]
}

input BusinessRoleUpdateManyWithWhereNestedInput {
  data: BusinessRoleUpdateManyDataInput!
  where: BusinessRoleScalarWhereInput!
}

input BusinessRoleUpdateOneWithoutAppBusinessOwnerInput {
  connect: BusinessRoleWhereUniqueInput
  create: BusinessRoleCreateWithoutAppBusinessOwnerInput
  delete: Boolean
  disconnect: Boolean
  update: BusinessRoleUpdateWithoutAppBusinessOwnerDataInput
  upsert: BusinessRoleUpsertWithoutAppBusinessOwnerInput
}

input BusinessRoleUpdateOneWithoutAppItOwnerInput {
  connect: BusinessRoleWhereUniqueInput
  create: BusinessRoleCreateWithoutAppItOwnerInput
  delete: Boolean
  disconnect: Boolean
  update: BusinessRoleUpdateWithoutAppItOwnerDataInput
  upsert: BusinessRoleUpsertWithoutAppItOwnerInput
}

input BusinessRoleUpdateOneWithoutAppSecAdminInput {
  connect: BusinessRoleWhereUniqueInput
  create: BusinessRoleCreateWithoutAppSecAdminInput
  delete: Boolean
  disconnect: Boolean
  update: BusinessRoleUpdateWithoutAppSecAdminDataInput
  upsert: BusinessRoleUpsertWithoutAppSecAdminInput
}

input BusinessRoleUpdateOneWithoutProcessInput {
  connect: BusinessRoleWhereUniqueInput
  create: BusinessRoleCreateWithoutProcessInput
  delete: Boolean
  disconnect: Boolean
  update: BusinessRoleUpdateWithoutProcessDataInput
  upsert: BusinessRoleUpsertWithoutProcessInput
}

input BusinessRoleUpdateWithoutAppBusinessOwnerDataInput {
  appItOwner: ApplicationUpdateManyWithoutItOwnerInput
  appSecAdmin: ApplicationUpdateManyWithoutSecurityAdministratorInput
  description: String
  name: String
  organizationalUnit: OrganizationalUnitUpdateOneRequiredWithoutBusinessRolesInput
  person: PersonUpdateOneWithoutRolesInput
  process: ProcessUpdateManyWithoutProcessOwnerInput
  raciExecutive: RACI
  raciFinancial: RACI
  raciPrivacy: RACI
  raciSecurity: RACI
}

input BusinessRoleUpdateWithoutAppItOwnerDataInput {
  appBusinessOwner: ApplicationUpdateManyWithoutBusinessOwnerInput
  appSecAdmin: ApplicationUpdateManyWithoutSecurityAdministratorInput
  description: String
  name: String
  organizationalUnit: OrganizationalUnitUpdateOneRequiredWithoutBusinessRolesInput
  person: PersonUpdateOneWithoutRolesInput
  process: ProcessUpdateManyWithoutProcessOwnerInput
  raciExecutive: RACI
  raciFinancial: RACI
  raciPrivacy: RACI
  raciSecurity: RACI
}

input BusinessRoleUpdateWithoutAppSecAdminDataInput {
  appBusinessOwner: ApplicationUpdateManyWithoutBusinessOwnerInput
  appItOwner: ApplicationUpdateManyWithoutItOwnerInput
  description: String
  name: String
  organizationalUnit: OrganizationalUnitUpdateOneRequiredWithoutBusinessRolesInput
  person: PersonUpdateOneWithoutRolesInput
  process: ProcessUpdateManyWithoutProcessOwnerInput
  raciExecutive: RACI
  raciFinancial: RACI
  raciPrivacy: RACI
  raciSecurity: RACI
}

input BusinessRoleUpdateWithoutOrganizationalUnitDataInput {
  appBusinessOwner: ApplicationUpdateManyWithoutBusinessOwnerInput
  appItOwner: ApplicationUpdateManyWithoutItOwnerInput
  appSecAdmin: ApplicationUpdateManyWithoutSecurityAdministratorInput
  description: String
  name: String
  person: PersonUpdateOneWithoutRolesInput
  process: ProcessUpdateManyWithoutProcessOwnerInput
  raciExecutive: RACI
  raciFinancial: RACI
  raciPrivacy: RACI
  raciSecurity: RACI
}

input BusinessRoleUpdateWithoutPersonDataInput {
  appBusinessOwner: ApplicationUpdateManyWithoutBusinessOwnerInput
  appItOwner: ApplicationUpdateManyWithoutItOwnerInput
  appSecAdmin: ApplicationUpdateManyWithoutSecurityAdministratorInput
  description: String
  name: String
  organizationalUnit: OrganizationalUnitUpdateOneRequiredWithoutBusinessRolesInput
  process: ProcessUpdateManyWithoutProcessOwnerInput
  raciExecutive: RACI
  raciFinancial: RACI
  raciPrivacy: RACI
  raciSecurity: RACI
}

input BusinessRoleUpdateWithoutProcessDataInput {
  appBusinessOwner: ApplicationUpdateManyWithoutBusinessOwnerInput
  appItOwner: ApplicationUpdateManyWithoutItOwnerInput
  appSecAdmin: ApplicationUpdateManyWithoutSecurityAdministratorInput
  description: String
  name: String
  organizationalUnit: OrganizationalUnitUpdateOneRequiredWithoutBusinessRolesInput
  person: PersonUpdateOneWithoutRolesInput
  raciExecutive: RACI
  raciFinancial: RACI
  raciPrivacy: RACI
  raciSecurity: RACI
}

input BusinessRoleUpdateWithWhereUniqueWithoutOrganizationalUnitInput {
  data: BusinessRoleUpdateWithoutOrganizationalUnitDataInput!
  where: BusinessRoleWhereUniqueInput!
}

input BusinessRoleUpdateWithWhereUniqueWithoutPersonInput {
  data: BusinessRoleUpdateWithoutPersonDataInput!
  where: BusinessRoleWhereUniqueInput!
}

input BusinessRoleUpsertWithoutAppBusinessOwnerInput {
  create: BusinessRoleCreateWithoutAppBusinessOwnerInput!
  update: BusinessRoleUpdateWithoutAppBusinessOwnerDataInput!
}

input BusinessRoleUpsertWithoutAppItOwnerInput {
  create: BusinessRoleCreateWithoutAppItOwnerInput!
  update: BusinessRoleUpdateWithoutAppItOwnerDataInput!
}

input BusinessRoleUpsertWithoutAppSecAdminInput {
  create: BusinessRoleCreateWithoutAppSecAdminInput!
  update: BusinessRoleUpdateWithoutAppSecAdminDataInput!
}

input BusinessRoleUpsertWithoutProcessInput {
  create: BusinessRoleCreateWithoutProcessInput!
  update: BusinessRoleUpdateWithoutProcessDataInput!
}

input BusinessRoleUpsertWithWhereUniqueWithoutOrganizationalUnitInput {
  create: BusinessRoleCreateWithoutOrganizationalUnitInput!
  update: BusinessRoleUpdateWithoutOrganizationalUnitDataInput!
  where: BusinessRoleWhereUniqueInput!
}

input BusinessRoleUpsertWithWhereUniqueWithoutPersonInput {
  create: BusinessRoleCreateWithoutPersonInput!
  update: BusinessRoleUpdateWithoutPersonDataInput!
  where: BusinessRoleWhereUniqueInput!
}

input BusinessRoleWhereInput {
  AND: [BusinessRoleWhereInput!]
  appBusinessOwner_every: ApplicationWhereInput
  appBusinessOwner_none: ApplicationWhereInput
  appBusinessOwner_some: ApplicationWhereInput
  appItOwner_every: ApplicationWhereInput
  appItOwner_none: ApplicationWhereInput
  appItOwner_some: ApplicationWhereInput
  appSecAdmin_every: ApplicationWhereInput
  appSecAdmin_none: ApplicationWhereInput
  appSecAdmin_some: ApplicationWhereInput
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [BusinessRoleWhereInput!]
  OR: [BusinessRoleWhereInput!]
  organizationalUnit: OrganizationalUnitWhereInput
  person: PersonWhereInput
  process_every: ProcessWhereInput
  process_none: ProcessWhereInput
  process_some: ProcessWhereInput
  raciExecutive: RACI
  raciExecutive_in: [RACI!]
  raciExecutive_not: RACI
  raciExecutive_not_in: [RACI!]
  raciFinancial: RACI
  raciFinancial_in: [RACI!]
  raciFinancial_not: RACI
  raciFinancial_not_in: [RACI!]
  raciPrivacy: RACI
  raciPrivacy_in: [RACI!]
  raciPrivacy_not: RACI
  raciPrivacy_not_in: [RACI!]
  raciSecurity: RACI
  raciSecurity_in: [RACI!]
  raciSecurity_not: RACI
  raciSecurity_not_in: [RACI!]
}

input BusinessRoleWhereUniqueInput {
  id: ID
}

type ClassificationLabel {
  criteria: String
  dataType(after: String, before: String, first: Int, last: Int, orderBy: DataTypeOrderByInput, skip: Int, where: DataTypeWhereInput): [DataType!]
  id: ID!
  label: String!
  qualityAttribute: QualityAttribute
  score: Int!
}

type ClassificationLabelConnection {
  aggregate: AggregateClassificationLabel!
  edges: [ClassificationLabelEdge!]!
  pageInfo: PageInfo!
}

input ClassificationLabelCreateInput {
  criteria: String
  dataType: DataTypeCreateManyWithoutClassificationLabelsInput
  id: ID
  label: String!
  qualityAttribute: QualityAttributeCreateOneWithoutClassificationLabelsInput
  score: Int!
}

input ClassificationLabelCreateManyWithoutDataTypeInput {
  connect: [ClassificationLabelWhereUniqueInput!]
  create: [ClassificationLabelCreateWithoutDataTypeInput!]
}

input ClassificationLabelCreateManyWithoutQualityAttributeInput {
  connect: [ClassificationLabelWhereUniqueInput!]
  create: [ClassificationLabelCreateWithoutQualityAttributeInput!]
}

input ClassificationLabelCreateWithoutDataTypeInput {
  criteria: String
  id: ID
  label: String!
  qualityAttribute: QualityAttributeCreateOneWithoutClassificationLabelsInput
  score: Int!
}

input ClassificationLabelCreateWithoutQualityAttributeInput {
  criteria: String
  dataType: DataTypeCreateManyWithoutClassificationLabelsInput
  id: ID
  label: String!
  score: Int!
}

type ClassificationLabelEdge {
  cursor: String!
  node: ClassificationLabel!
}

enum ClassificationLabelOrderByInput {
  createdAt_ASC
  createdAt_DESC
  criteria_ASC
  criteria_DESC
  id_ASC
  id_DESC
  label_ASC
  label_DESC
  score_ASC
  score_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ClassificationLabelScalarWhereInput {
  AND: [ClassificationLabelScalarWhereInput!]
  criteria: String
  criteria_contains: String
  criteria_ends_with: String
  criteria_gt: String
  criteria_gte: String
  criteria_in: [String!]
  criteria_lt: String
  criteria_lte: String
  criteria_not: String
  criteria_not_contains: String
  criteria_not_ends_with: String
  criteria_not_in: [String!]
  criteria_not_starts_with: String
  criteria_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  label: String
  label_contains: String
  label_ends_with: String
  label_gt: String
  label_gte: String
  label_in: [String!]
  label_lt: String
  label_lte: String
  label_not: String
  label_not_contains: String
  label_not_ends_with: String
  label_not_in: [String!]
  label_not_starts_with: String
  label_starts_with: String
  NOT: [ClassificationLabelScalarWhereInput!]
  OR: [ClassificationLabelScalarWhereInput!]
  score: Int
  score_gt: Int
  score_gte: Int
  score_in: [Int!]
  score_lt: Int
  score_lte: Int
  score_not: Int
  score_not_in: [Int!]
}

input ClassificationLabelUpdateInput {
  criteria: String
  dataType: DataTypeUpdateManyWithoutClassificationLabelsInput
  label: String
  qualityAttribute: QualityAttributeUpdateOneWithoutClassificationLabelsInput
  score: Int
}

input ClassificationLabelUpdateManyDataInput {
  criteria: String
  label: String
  score: Int
}

input ClassificationLabelUpdateManyMutationInput {
  criteria: String
  label: String
  score: Int
}

input ClassificationLabelUpdateManyWithoutDataTypeInput {
  connect: [ClassificationLabelWhereUniqueInput!]
  create: [ClassificationLabelCreateWithoutDataTypeInput!]
  delete: [ClassificationLabelWhereUniqueInput!]
  deleteMany: [ClassificationLabelScalarWhereInput!]
  disconnect: [ClassificationLabelWhereUniqueInput!]
  set: [ClassificationLabelWhereUniqueInput!]
  update: [ClassificationLabelUpdateWithWhereUniqueWithoutDataTypeInput!]
  updateMany: [ClassificationLabelUpdateManyWithWhereNestedInput!]
  upsert: [ClassificationLabelUpsertWithWhereUniqueWithoutDataTypeInput!]
}

input ClassificationLabelUpdateManyWithoutQualityAttributeInput {
  connect: [ClassificationLabelWhereUniqueInput!]
  create: [ClassificationLabelCreateWithoutQualityAttributeInput!]
  delete: [ClassificationLabelWhereUniqueInput!]
  deleteMany: [ClassificationLabelScalarWhereInput!]
  disconnect: [ClassificationLabelWhereUniqueInput!]
  set: [ClassificationLabelWhereUniqueInput!]
  update: [ClassificationLabelUpdateWithWhereUniqueWithoutQualityAttributeInput!]
  updateMany: [ClassificationLabelUpdateManyWithWhereNestedInput!]
  upsert: [ClassificationLabelUpsertWithWhereUniqueWithoutQualityAttributeInput!]
}

input ClassificationLabelUpdateManyWithWhereNestedInput {
  data: ClassificationLabelUpdateManyDataInput!
  where: ClassificationLabelScalarWhereInput!
}

input ClassificationLabelUpdateWithoutDataTypeDataInput {
  criteria: String
  label: String
  qualityAttribute: QualityAttributeUpdateOneWithoutClassificationLabelsInput
  score: Int
}

input ClassificationLabelUpdateWithoutQualityAttributeDataInput {
  criteria: String
  dataType: DataTypeUpdateManyWithoutClassificationLabelsInput
  label: String
  score: Int
}

input ClassificationLabelUpdateWithWhereUniqueWithoutDataTypeInput {
  data: ClassificationLabelUpdateWithoutDataTypeDataInput!
  where: ClassificationLabelWhereUniqueInput!
}

input ClassificationLabelUpdateWithWhereUniqueWithoutQualityAttributeInput {
  data: ClassificationLabelUpdateWithoutQualityAttributeDataInput!
  where: ClassificationLabelWhereUniqueInput!
}

input ClassificationLabelUpsertWithWhereUniqueWithoutDataTypeInput {
  create: ClassificationLabelCreateWithoutDataTypeInput!
  update: ClassificationLabelUpdateWithoutDataTypeDataInput!
  where: ClassificationLabelWhereUniqueInput!
}

input ClassificationLabelUpsertWithWhereUniqueWithoutQualityAttributeInput {
  create: ClassificationLabelCreateWithoutQualityAttributeInput!
  update: ClassificationLabelUpdateWithoutQualityAttributeDataInput!
  where: ClassificationLabelWhereUniqueInput!
}

input ClassificationLabelWhereInput {
  AND: [ClassificationLabelWhereInput!]
  criteria: String
  criteria_contains: String
  criteria_ends_with: String
  criteria_gt: String
  criteria_gte: String
  criteria_in: [String!]
  criteria_lt: String
  criteria_lte: String
  criteria_not: String
  criteria_not_contains: String
  criteria_not_ends_with: String
  criteria_not_in: [String!]
  criteria_not_starts_with: String
  criteria_starts_with: String
  dataType_every: DataTypeWhereInput
  dataType_none: DataTypeWhereInput
  dataType_some: DataTypeWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  label: String
  label_contains: String
  label_ends_with: String
  label_gt: String
  label_gte: String
  label_in: [String!]
  label_lt: String
  label_lte: String
  label_not: String
  label_not_contains: String
  label_not_ends_with: String
  label_not_in: [String!]
  label_not_starts_with: String
  label_starts_with: String
  NOT: [ClassificationLabelWhereInput!]
  OR: [ClassificationLabelWhereInput!]
  qualityAttribute: QualityAttributeWhereInput
  score: Int
  score_gt: Int
  score_gte: Int
  score_in: [Int!]
  score_lt: Int
  score_lte: Int
  score_not: Int
  score_not_in: [Int!]
}

input ClassificationLabelWhereUniqueInput {
  id: ID
}

enum CLASSIFICATIONOBJECT {
  APPLICATION
  DATA
}

type DataType {
  application(after: String, before: String, first: Int, last: Int, orderBy: ApplicationOrderByInput, skip: Int, where: ApplicationWhereInput): [Application!]
  classificationLabels(after: String, before: String, first: Int, last: Int, orderBy: ClassificationLabelOrderByInput, skip: Int, where: ClassificationLabelWhereInput): [ClassificationLabel!]
  description: String
  id: ID!
  name: String!
}

type DataTypeConnection {
  aggregate: AggregateDataType!
  edges: [DataTypeEdge!]!
  pageInfo: PageInfo!
}

input DataTypeCreateInput {
  application: ApplicationCreateManyWithoutDataTypesInput
  classificationLabels: ClassificationLabelCreateManyWithoutDataTypeInput
  description: String
  id: ID
  name: String!
}

input DataTypeCreateManyWithoutApplicationInput {
  connect: [DataTypeWhereUniqueInput!]
  create: [DataTypeCreateWithoutApplicationInput!]
}

input DataTypeCreateManyWithoutClassificationLabelsInput {
  connect: [DataTypeWhereUniqueInput!]
  create: [DataTypeCreateWithoutClassificationLabelsInput!]
}

input DataTypeCreateWithoutApplicationInput {
  classificationLabels: ClassificationLabelCreateManyWithoutDataTypeInput
  description: String
  id: ID
  name: String!
}

input DataTypeCreateWithoutClassificationLabelsInput {
  application: ApplicationCreateManyWithoutDataTypesInput
  description: String
  id: ID
  name: String!
}

type DataTypeEdge {
  cursor: String!
  node: DataType!
}

enum DataTypeOrderByInput {
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input DataTypeScalarWhereInput {
  AND: [DataTypeScalarWhereInput!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [DataTypeScalarWhereInput!]
  OR: [DataTypeScalarWhereInput!]
}

input DataTypeUpdateInput {
  application: ApplicationUpdateManyWithoutDataTypesInput
  classificationLabels: ClassificationLabelUpdateManyWithoutDataTypeInput
  description: String
  name: String
}

input DataTypeUpdateManyDataInput {
  description: String
  name: String
}

input DataTypeUpdateManyMutationInput {
  description: String
  name: String
}

input DataTypeUpdateManyWithoutApplicationInput {
  connect: [DataTypeWhereUniqueInput!]
  create: [DataTypeCreateWithoutApplicationInput!]
  delete: [DataTypeWhereUniqueInput!]
  deleteMany: [DataTypeScalarWhereInput!]
  disconnect: [DataTypeWhereUniqueInput!]
  set: [DataTypeWhereUniqueInput!]
  update: [DataTypeUpdateWithWhereUniqueWithoutApplicationInput!]
  updateMany: [DataTypeUpdateManyWithWhereNestedInput!]
  upsert: [DataTypeUpsertWithWhereUniqueWithoutApplicationInput!]
}

input DataTypeUpdateManyWithoutClassificationLabelsInput {
  connect: [DataTypeWhereUniqueInput!]
  create: [DataTypeCreateWithoutClassificationLabelsInput!]
  delete: [DataTypeWhereUniqueInput!]
  deleteMany: [DataTypeScalarWhereInput!]
  disconnect: [DataTypeWhereUniqueInput!]
  set: [DataTypeWhereUniqueInput!]
  update: [DataTypeUpdateWithWhereUniqueWithoutClassificationLabelsInput!]
  updateMany: [DataTypeUpdateManyWithWhereNestedInput!]
  upsert: [DataTypeUpsertWithWhereUniqueWithoutClassificationLabelsInput!]
}

input DataTypeUpdateManyWithWhereNestedInput {
  data: DataTypeUpdateManyDataInput!
  where: DataTypeScalarWhereInput!
}

input DataTypeUpdateWithoutApplicationDataInput {
  classificationLabels: ClassificationLabelUpdateManyWithoutDataTypeInput
  description: String
  name: String
}

input DataTypeUpdateWithoutClassificationLabelsDataInput {
  application: ApplicationUpdateManyWithoutDataTypesInput
  description: String
  name: String
}

input DataTypeUpdateWithWhereUniqueWithoutApplicationInput {
  data: DataTypeUpdateWithoutApplicationDataInput!
  where: DataTypeWhereUniqueInput!
}

input DataTypeUpdateWithWhereUniqueWithoutClassificationLabelsInput {
  data: DataTypeUpdateWithoutClassificationLabelsDataInput!
  where: DataTypeWhereUniqueInput!
}

input DataTypeUpsertWithWhereUniqueWithoutApplicationInput {
  create: DataTypeCreateWithoutApplicationInput!
  update: DataTypeUpdateWithoutApplicationDataInput!
  where: DataTypeWhereUniqueInput!
}

input DataTypeUpsertWithWhereUniqueWithoutClassificationLabelsInput {
  create: DataTypeCreateWithoutClassificationLabelsInput!
  update: DataTypeUpdateWithoutClassificationLabelsDataInput!
  where: DataTypeWhereUniqueInput!
}

input DataTypeWhereInput {
  AND: [DataTypeWhereInput!]
  application_every: ApplicationWhereInput
  application_none: ApplicationWhereInput
  application_some: ApplicationWhereInput
  classificationLabels_every: ClassificationLabelWhereInput
  classificationLabels_none: ClassificationLabelWhereInput
  classificationLabels_some: ClassificationLabelWhereInput
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [DataTypeWhereInput!]
  OR: [DataTypeWhereInput!]
}

input DataTypeWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Json

type Location {
  address: String!
  description: String
  id: ID!
  name: String!
  organization: Organization
}

type LocationConnection {
  aggregate: AggregateLocation!
  edges: [LocationEdge!]!
  pageInfo: PageInfo!
}

input LocationCreateInput {
  address: String!
  description: String
  id: ID
  name: String!
  organization: OrganizationCreateOneWithoutHeadOfficeInput
}

input LocationCreateOneWithoutOrganizationInput {
  connect: LocationWhereUniqueInput
  create: LocationCreateWithoutOrganizationInput
}

input LocationCreateWithoutOrganizationInput {
  address: String!
  description: String
  id: ID
  name: String!
}

type LocationEdge {
  cursor: String!
  node: Location!
}

enum LocationOrderByInput {
  address_ASC
  address_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input LocationUpdateInput {
  address: String
  description: String
  name: String
  organization: OrganizationUpdateOneWithoutHeadOfficeInput
}

input LocationUpdateManyMutationInput {
  address: String
  description: String
  name: String
}

input LocationUpdateOneRequiredWithoutOrganizationInput {
  connect: LocationWhereUniqueInput
  create: LocationCreateWithoutOrganizationInput
  update: LocationUpdateWithoutOrganizationDataInput
  upsert: LocationUpsertWithoutOrganizationInput
}

input LocationUpdateWithoutOrganizationDataInput {
  address: String
  description: String
  name: String
}

input LocationUpsertWithoutOrganizationInput {
  create: LocationCreateWithoutOrganizationInput!
  update: LocationUpdateWithoutOrganizationDataInput!
}

input LocationWhereInput {
  address: String
  address_contains: String
  address_ends_with: String
  address_gt: String
  address_gte: String
  address_in: [String!]
  address_lt: String
  address_lte: String
  address_not: String
  address_not_contains: String
  address_not_ends_with: String
  address_not_in: [String!]
  address_not_starts_with: String
  address_starts_with: String
  AND: [LocationWhereInput!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  organization: OrganizationWhereInput
}

input LocationWhereUniqueInput {
  id: ID
}

input LoginInput {
  email: String
  password: String
}

scalar Long

type Mutation {
  authenticateUser(data: LoginInput): Token
  createAdmin(data: LoginInput): User
  createApplication(data: ApplicationCreateInput!): Application!
  createBusinessRole(data: BusinessRoleCreateInput!): BusinessRole!
  createClassificationLabel(data: ClassificationLabelCreateInput!): ClassificationLabel!
  createDataType(data: DataTypeCreateInput!): DataType!
  createLocation(data: LocationCreateInput!): Location!
  createOrganization(data: OrganizationCreateInput!): Organization!
  createOrganizationalUnit(data: OrganizationalUnitCreateInput!): OrganizationalUnit
  createOrganizationalUnitType(data: OrganizationalUnitTypeCreateInput!): OrganizationalUnitType!
  createPerson(data: PersonCreateInput!): Person!
  createProcess(data: ProcessCreateInput!): Process!
  createProcessingActivity(data: ProcessingActivityCreateInput!): ProcessingActivity!
  createQualityAttribute(data: QualityAttributeCreateInput!): QualityAttribute!
  createUser(data: UserCreateInput!): User
  deleteApplication(where: ApplicationWhereUniqueInput!): Application
  deleteBusinessRole(where: BusinessRoleWhereUniqueInput!): BusinessRole
  deleteClassificationLabel(where: ClassificationLabelWhereUniqueInput!): ClassificationLabel
  deleteDataType(where: DataTypeWhereUniqueInput!): DataType
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteManyApplications(where: ApplicationWhereInput): BatchPayload!
  deleteManyBusinessRoles(where: BusinessRoleWhereInput): BatchPayload!
  deleteManyClassificationLabels(where: ClassificationLabelWhereInput): BatchPayload!
  deleteManyDataTypes(where: DataTypeWhereInput): BatchPayload!
  deleteManyLocations(where: LocationWhereInput): BatchPayload!
  deleteManyOrganizationalUnits(where: OrganizationalUnitWhereInput): BatchPayload!
  deleteManyOrganizationalUnitTypes(where: OrganizationalUnitTypeWhereInput): BatchPayload!
  deleteManyOrganizations(where: OrganizationWhereInput): BatchPayload!
  deleteManyPersons(where: PersonWhereInput): BatchPayload!
  deleteManyProcesses(where: ProcessWhereInput): BatchPayload!
  deleteManyProcessingActivities(where: ProcessingActivityWhereInput): BatchPayload!
  deleteManyQualityAttributes(where: QualityAttributeWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteOrganization(where: OrganizationWhereUniqueInput!): Organization
  deleteOrganizationalUnit(where: OrganizationalUnitWhereUniqueInput!): OrganizationalUnit
  deleteOrganizationalUnitType(where: OrganizationalUnitTypeWhereUniqueInput!): OrganizationalUnitType
  deletePerson(where: PersonWhereUniqueInput!): Person
  deleteProcess(where: ProcessWhereUniqueInput!): Process
  deleteProcessingActivity(where: ProcessingActivityWhereUniqueInput!): ProcessingActivity
  deleteQualityAttribute(where: QualityAttributeWhereUniqueInput!): QualityAttribute
  deleteUser(where: UserWhereUniqueInput!): User
  updateApplication(data: ApplicationUpdateInput!, where: ApplicationWhereUniqueInput!): Application
  updateBusinessRole(data: BusinessRoleUpdateInput!, where: BusinessRoleWhereUniqueInput!): BusinessRole
  updateClassificationLabel(data: ClassificationLabelUpdateInput!, where: ClassificationLabelWhereUniqueInput!): ClassificationLabel
  updateDataType(data: DataTypeUpdateInput!, where: DataTypeWhereUniqueInput!): DataType
  updateLocation(data: LocationUpdateInput!, where: LocationWhereUniqueInput!): Location
  updateManyApplications(data: ApplicationUpdateManyMutationInput!, where: ApplicationWhereInput): BatchPayload!
  updateManyBusinessRoles(data: BusinessRoleUpdateManyMutationInput!, where: BusinessRoleWhereInput): BatchPayload!
  updateManyClassificationLabels(data: ClassificationLabelUpdateManyMutationInput!, where: ClassificationLabelWhereInput): BatchPayload!
  updateManyDataTypes(data: DataTypeUpdateManyMutationInput!, where: DataTypeWhereInput): BatchPayload!
  updateManyLocations(data: LocationUpdateManyMutationInput!, where: LocationWhereInput): BatchPayload!
  updateManyOrganizationalUnits(data: OrganizationalUnitUpdateManyMutationInput!, where: OrganizationalUnitWhereInput): BatchPayload!
  updateManyOrganizationalUnitTypes(data: OrganizationalUnitTypeUpdateManyMutationInput!, where: OrganizationalUnitTypeWhereInput): BatchPayload!
  updateManyOrganizations(data: OrganizationUpdateManyMutationInput!, where: OrganizationWhereInput): BatchPayload!
  updateManyPersons(data: PersonUpdateManyMutationInput!, where: PersonWhereInput): BatchPayload!
  updateManyProcesses(data: ProcessUpdateManyMutationInput!, where: ProcessWhereInput): BatchPayload!
  updateManyProcessingActivities(data: ProcessingActivityUpdateManyMutationInput!, where: ProcessingActivityWhereInput): BatchPayload!
  updateManyQualityAttributes(data: QualityAttributeUpdateManyMutationInput!, where: QualityAttributeWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateOrganization(data: OrganizationUpdateInput!, where: OrganizationWhereUniqueInput!): Organization
  updateOrganizationalUnit(data: OrganizationalUnitUpdateInput!, where: OrganizationalUnitWhereUniqueInput!): OrganizationalUnit
  updateOrganizationalUnitType(data: OrganizationalUnitTypeUpdateInput!, where: OrganizationalUnitTypeWhereUniqueInput!): OrganizationalUnitType
  updatePerson(data: PersonUpdateInput!, where: PersonWhereUniqueInput!): Person
  updateProcess(data: ProcessUpdateInput!, where: ProcessWhereUniqueInput!): Process
  updateProcessingActivity(data: ProcessingActivityUpdateInput!, where: ProcessingActivityWhereUniqueInput!): ProcessingActivity
  updateQualityAttribute(data: QualityAttributeUpdateInput!, where: QualityAttributeWhereUniqueInput!): QualityAttribute
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertApplication(create: ApplicationCreateInput!, update: ApplicationUpdateInput!, where: ApplicationWhereUniqueInput!): Application!
  upsertBusinessRole(create: BusinessRoleCreateInput!, update: BusinessRoleUpdateInput!, where: BusinessRoleWhereUniqueInput!): BusinessRole!
  upsertClassificationLabel(create: ClassificationLabelCreateInput!, update: ClassificationLabelUpdateInput!, where: ClassificationLabelWhereUniqueInput!): ClassificationLabel!
  upsertDataType(create: DataTypeCreateInput!, update: DataTypeUpdateInput!, where: DataTypeWhereUniqueInput!): DataType!
  upsertLocation(create: LocationCreateInput!, update: LocationUpdateInput!, where: LocationWhereUniqueInput!): Location!
  upsertOrganization(create: OrganizationCreateInput!, update: OrganizationUpdateInput!, where: OrganizationWhereUniqueInput!): Organization!
  upsertOrganizationalUnit(create: OrganizationalUnitCreateInput!, update: OrganizationalUnitUpdateInput!, where: OrganizationalUnitWhereUniqueInput!): OrganizationalUnit!
  upsertOrganizationalUnitType(create: OrganizationalUnitTypeCreateInput!, update: OrganizationalUnitTypeUpdateInput!, where: OrganizationalUnitTypeWhereUniqueInput!): OrganizationalUnitType!
  upsertPerson(create: PersonCreateInput!, update: PersonUpdateInput!, where: PersonWhereUniqueInput!): Person!
  upsertProcess(create: ProcessCreateInput!, update: ProcessUpdateInput!, where: ProcessWhereUniqueInput!): Process!
  upsertProcessingActivity(create: ProcessingActivityCreateInput!, update: ProcessingActivityUpdateInput!, where: ProcessingActivityWhereUniqueInput!): ProcessingActivity!
  upsertQualityAttribute(create: QualityAttributeCreateInput!, update: QualityAttributeUpdateInput!, where: QualityAttributeWhereUniqueInput!): QualityAttribute!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Organization {
  contactDetails: String!
  description: String
  dpo: String!
  headOffice: Location!
  id: ID!
  name: String!
  representative: String!
}

type OrganizationalUnit {
  businessRoles(after: String, before: String, first: Int, last: Int, orderBy: BusinessRoleOrderByInput, skip: Int, where: BusinessRoleWhereInput): [BusinessRole!]
  children(after: String, before: String, first: Int, last: Int, orderBy: OrganizationalUnitOrderByInput, skip: Int, where: OrganizationalUnitWhereInput): [OrganizationalUnit!]
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  organizationalUnitType: OrganizationalUnitType
  parent: OrganizationalUnit
  processes(after: String, before: String, first: Int, last: Int, orderBy: ProcessOrderByInput, skip: Int, where: ProcessWhereInput): [Process!]
  updatedAt: DateTime!
}

type OrganizationalUnitConnection {
  aggregate: AggregateOrganizationalUnit!
  edges: [OrganizationalUnitEdge!]!
  pageInfo: PageInfo!
}

input OrganizationalUnitCreateInput {
  businessRoles: BusinessRoleCreateManyWithoutOrganizationalUnitInput
  children: OrganizationalUnitCreateManyWithoutParentInput
  description: String
  id: ID
  name: String!
  organizationalUnitType: OrganizationalUnitTypeCreateOneWithoutOrganizationalUnitInput
  parent: OrganizationalUnitCreateOneWithoutChildrenInput
  processes: ProcessCreateManyWithoutOrganizationalUnitInput
}

input OrganizationalUnitCreateManyWithoutOrganizationalUnitTypeInput {
  connect: [OrganizationalUnitWhereUniqueInput!]
  create: [OrganizationalUnitCreateWithoutOrganizationalUnitTypeInput!]
}

input OrganizationalUnitCreateManyWithoutParentInput {
  connect: [OrganizationalUnitWhereUniqueInput!]
  create: [OrganizationalUnitCreateWithoutParentInput!]
}

input OrganizationalUnitCreateOneWithoutBusinessRolesInput {
  connect: OrganizationalUnitWhereUniqueInput
  create: OrganizationalUnitCreateWithoutBusinessRolesInput
}

input OrganizationalUnitCreateOneWithoutChildrenInput {
  connect: OrganizationalUnitWhereUniqueInput
  create: OrganizationalUnitCreateWithoutChildrenInput
}

input OrganizationalUnitCreateOneWithoutProcessesInput {
  connect: OrganizationalUnitWhereUniqueInput
  create: OrganizationalUnitCreateWithoutProcessesInput
}

input OrganizationalUnitCreateWithoutBusinessRolesInput {
  children: OrganizationalUnitCreateManyWithoutParentInput
  description: String
  id: ID
  name: String!
  organizationalUnitType: OrganizationalUnitTypeCreateOneWithoutOrganizationalUnitInput
  parent: OrganizationalUnitCreateOneWithoutChildrenInput
  processes: ProcessCreateManyWithoutOrganizationalUnitInput
}

input OrganizationalUnitCreateWithoutChildrenInput {
  businessRoles: BusinessRoleCreateManyWithoutOrganizationalUnitInput
  description: String
  id: ID
  name: String!
  organizationalUnitType: OrganizationalUnitTypeCreateOneWithoutOrganizationalUnitInput
  parent: OrganizationalUnitCreateOneWithoutChildrenInput
  processes: ProcessCreateManyWithoutOrganizationalUnitInput
}

input OrganizationalUnitCreateWithoutOrganizationalUnitTypeInput {
  businessRoles: BusinessRoleCreateManyWithoutOrganizationalUnitInput
  children: OrganizationalUnitCreateManyWithoutParentInput
  description: String
  id: ID
  name: String!
  parent: OrganizationalUnitCreateOneWithoutChildrenInput
  processes: ProcessCreateManyWithoutOrganizationalUnitInput
}

input OrganizationalUnitCreateWithoutParentInput {
  businessRoles: BusinessRoleCreateManyWithoutOrganizationalUnitInput
  children: OrganizationalUnitCreateManyWithoutParentInput
  description: String
  id: ID
  name: String!
  organizationalUnitType: OrganizationalUnitTypeCreateOneWithoutOrganizationalUnitInput
  processes: ProcessCreateManyWithoutOrganizationalUnitInput
}

input OrganizationalUnitCreateWithoutProcessesInput {
  businessRoles: BusinessRoleCreateManyWithoutOrganizationalUnitInput
  children: OrganizationalUnitCreateManyWithoutParentInput
  description: String
  id: ID
  name: String!
  organizationalUnitType: OrganizationalUnitTypeCreateOneWithoutOrganizationalUnitInput
  parent: OrganizationalUnitCreateOneWithoutChildrenInput
}

type OrganizationalUnitEdge {
  cursor: String!
  node: OrganizationalUnit!
}

enum OrganizationalUnitOrderByInput {
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input OrganizationalUnitScalarWhereInput {
  AND: [OrganizationalUnitScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [OrganizationalUnitScalarWhereInput!]
  OR: [OrganizationalUnitScalarWhereInput!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

type OrganizationalUnitType {
  description: String
  id: ID!
  name: String!
  organizationalUnit(after: String, before: String, first: Int, last: Int, orderBy: OrganizationalUnitOrderByInput, skip: Int, where: OrganizationalUnitWhereInput): [OrganizationalUnit!]
  reportingUnit: Boolean
}

type OrganizationalUnitTypeConnection {
  aggregate: AggregateOrganizationalUnitType!
  edges: [OrganizationalUnitTypeEdge!]!
  pageInfo: PageInfo!
}

input OrganizationalUnitTypeCreateInput {
  description: String
  id: ID
  name: String!
  organizationalUnit: OrganizationalUnitCreateManyWithoutOrganizationalUnitTypeInput
  reportingUnit: Boolean
}

input OrganizationalUnitTypeCreateOneWithoutOrganizationalUnitInput {
  connect: OrganizationalUnitTypeWhereUniqueInput
  create: OrganizationalUnitTypeCreateWithoutOrganizationalUnitInput
}

input OrganizationalUnitTypeCreateWithoutOrganizationalUnitInput {
  description: String
  id: ID
  name: String!
  reportingUnit: Boolean
}

type OrganizationalUnitTypeEdge {
  cursor: String!
  node: OrganizationalUnitType!
}

enum OrganizationalUnitTypeOrderByInput {
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  reportingUnit_ASC
  reportingUnit_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input OrganizationalUnitTypeUpdateInput {
  description: String
  name: String
  organizationalUnit: OrganizationalUnitUpdateManyWithoutOrganizationalUnitTypeInput
  reportingUnit: Boolean
}

input OrganizationalUnitTypeUpdateManyMutationInput {
  description: String
  name: String
  reportingUnit: Boolean
}

input OrganizationalUnitTypeUpdateOneWithoutOrganizationalUnitInput {
  connect: OrganizationalUnitTypeWhereUniqueInput
  create: OrganizationalUnitTypeCreateWithoutOrganizationalUnitInput
  delete: Boolean
  disconnect: Boolean
  update: OrganizationalUnitTypeUpdateWithoutOrganizationalUnitDataInput
  upsert: OrganizationalUnitTypeUpsertWithoutOrganizationalUnitInput
}

input OrganizationalUnitTypeUpdateWithoutOrganizationalUnitDataInput {
  description: String
  name: String
  reportingUnit: Boolean
}

input OrganizationalUnitTypeUpsertWithoutOrganizationalUnitInput {
  create: OrganizationalUnitTypeCreateWithoutOrganizationalUnitInput!
  update: OrganizationalUnitTypeUpdateWithoutOrganizationalUnitDataInput!
}

input OrganizationalUnitTypeWhereInput {
  AND: [OrganizationalUnitTypeWhereInput!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [OrganizationalUnitTypeWhereInput!]
  OR: [OrganizationalUnitTypeWhereInput!]
  organizationalUnit_every: OrganizationalUnitWhereInput
  organizationalUnit_none: OrganizationalUnitWhereInput
  organizationalUnit_some: OrganizationalUnitWhereInput
  reportingUnit: Boolean
  reportingUnit_not: Boolean
}

input OrganizationalUnitTypeWhereUniqueInput {
  id: ID
}

input OrganizationalUnitUpdateInput {
  businessRoles: BusinessRoleUpdateManyWithoutOrganizationalUnitInput
  children: OrganizationalUnitUpdateManyWithoutParentInput
  description: String
  name: String
  organizationalUnitType: OrganizationalUnitTypeUpdateOneWithoutOrganizationalUnitInput
  parent: OrganizationalUnitUpdateOneWithoutChildrenInput
  processes: ProcessUpdateManyWithoutOrganizationalUnitInput
}

input OrganizationalUnitUpdateManyDataInput {
  description: String
  name: String
}

input OrganizationalUnitUpdateManyMutationInput {
  description: String
  name: String
}

input OrganizationalUnitUpdateManyWithoutOrganizationalUnitTypeInput {
  connect: [OrganizationalUnitWhereUniqueInput!]
  create: [OrganizationalUnitCreateWithoutOrganizationalUnitTypeInput!]
  delete: [OrganizationalUnitWhereUniqueInput!]
  deleteMany: [OrganizationalUnitScalarWhereInput!]
  disconnect: [OrganizationalUnitWhereUniqueInput!]
  set: [OrganizationalUnitWhereUniqueInput!]
  update: [OrganizationalUnitUpdateWithWhereUniqueWithoutOrganizationalUnitTypeInput!]
  updateMany: [OrganizationalUnitUpdateManyWithWhereNestedInput!]
  upsert: [OrganizationalUnitUpsertWithWhereUniqueWithoutOrganizationalUnitTypeInput!]
}

input OrganizationalUnitUpdateManyWithoutParentInput {
  connect: [OrganizationalUnitWhereUniqueInput!]
  create: [OrganizationalUnitCreateWithoutParentInput!]
  delete: [OrganizationalUnitWhereUniqueInput!]
  deleteMany: [OrganizationalUnitScalarWhereInput!]
  disconnect: [OrganizationalUnitWhereUniqueInput!]
  set: [OrganizationalUnitWhereUniqueInput!]
  update: [OrganizationalUnitUpdateWithWhereUniqueWithoutParentInput!]
  updateMany: [OrganizationalUnitUpdateManyWithWhereNestedInput!]
  upsert: [OrganizationalUnitUpsertWithWhereUniqueWithoutParentInput!]
}

input OrganizationalUnitUpdateManyWithWhereNestedInput {
  data: OrganizationalUnitUpdateManyDataInput!
  where: OrganizationalUnitScalarWhereInput!
}

input OrganizationalUnitUpdateOneRequiredWithoutBusinessRolesInput {
  connect: OrganizationalUnitWhereUniqueInput
  create: OrganizationalUnitCreateWithoutBusinessRolesInput
  update: OrganizationalUnitUpdateWithoutBusinessRolesDataInput
  upsert: OrganizationalUnitUpsertWithoutBusinessRolesInput
}

input OrganizationalUnitUpdateOneWithoutChildrenInput {
  connect: OrganizationalUnitWhereUniqueInput
  create: OrganizationalUnitCreateWithoutChildrenInput
  delete: Boolean
  disconnect: Boolean
  update: OrganizationalUnitUpdateWithoutChildrenDataInput
  upsert: OrganizationalUnitUpsertWithoutChildrenInput
}

input OrganizationalUnitUpdateOneWithoutProcessesInput {
  connect: OrganizationalUnitWhereUniqueInput
  create: OrganizationalUnitCreateWithoutProcessesInput
  delete: Boolean
  disconnect: Boolean
  update: OrganizationalUnitUpdateWithoutProcessesDataInput
  upsert: OrganizationalUnitUpsertWithoutProcessesInput
}

input OrganizationalUnitUpdateWithoutBusinessRolesDataInput {
  children: OrganizationalUnitUpdateManyWithoutParentInput
  description: String
  name: String
  organizationalUnitType: OrganizationalUnitTypeUpdateOneWithoutOrganizationalUnitInput
  parent: OrganizationalUnitUpdateOneWithoutChildrenInput
  processes: ProcessUpdateManyWithoutOrganizationalUnitInput
}

input OrganizationalUnitUpdateWithoutChildrenDataInput {
  businessRoles: BusinessRoleUpdateManyWithoutOrganizationalUnitInput
  description: String
  name: String
  organizationalUnitType: OrganizationalUnitTypeUpdateOneWithoutOrganizationalUnitInput
  parent: OrganizationalUnitUpdateOneWithoutChildrenInput
  processes: ProcessUpdateManyWithoutOrganizationalUnitInput
}

input OrganizationalUnitUpdateWithoutOrganizationalUnitTypeDataInput {
  businessRoles: BusinessRoleUpdateManyWithoutOrganizationalUnitInput
  children: OrganizationalUnitUpdateManyWithoutParentInput
  description: String
  name: String
  parent: OrganizationalUnitUpdateOneWithoutChildrenInput
  processes: ProcessUpdateManyWithoutOrganizationalUnitInput
}

input OrganizationalUnitUpdateWithoutParentDataInput {
  businessRoles: BusinessRoleUpdateManyWithoutOrganizationalUnitInput
  children: OrganizationalUnitUpdateManyWithoutParentInput
  description: String
  name: String
  organizationalUnitType: OrganizationalUnitTypeUpdateOneWithoutOrganizationalUnitInput
  processes: ProcessUpdateManyWithoutOrganizationalUnitInput
}

input OrganizationalUnitUpdateWithoutProcessesDataInput {
  businessRoles: BusinessRoleUpdateManyWithoutOrganizationalUnitInput
  children: OrganizationalUnitUpdateManyWithoutParentInput
  description: String
  name: String
  organizationalUnitType: OrganizationalUnitTypeUpdateOneWithoutOrganizationalUnitInput
  parent: OrganizationalUnitUpdateOneWithoutChildrenInput
}

input OrganizationalUnitUpdateWithWhereUniqueWithoutOrganizationalUnitTypeInput {
  data: OrganizationalUnitUpdateWithoutOrganizationalUnitTypeDataInput!
  where: OrganizationalUnitWhereUniqueInput!
}

input OrganizationalUnitUpdateWithWhereUniqueWithoutParentInput {
  data: OrganizationalUnitUpdateWithoutParentDataInput!
  where: OrganizationalUnitWhereUniqueInput!
}

input OrganizationalUnitUpsertWithoutBusinessRolesInput {
  create: OrganizationalUnitCreateWithoutBusinessRolesInput!
  update: OrganizationalUnitUpdateWithoutBusinessRolesDataInput!
}

input OrganizationalUnitUpsertWithoutChildrenInput {
  create: OrganizationalUnitCreateWithoutChildrenInput!
  update: OrganizationalUnitUpdateWithoutChildrenDataInput!
}

input OrganizationalUnitUpsertWithoutProcessesInput {
  create: OrganizationalUnitCreateWithoutProcessesInput!
  update: OrganizationalUnitUpdateWithoutProcessesDataInput!
}

input OrganizationalUnitUpsertWithWhereUniqueWithoutOrganizationalUnitTypeInput {
  create: OrganizationalUnitCreateWithoutOrganizationalUnitTypeInput!
  update: OrganizationalUnitUpdateWithoutOrganizationalUnitTypeDataInput!
  where: OrganizationalUnitWhereUniqueInput!
}

input OrganizationalUnitUpsertWithWhereUniqueWithoutParentInput {
  create: OrganizationalUnitCreateWithoutParentInput!
  update: OrganizationalUnitUpdateWithoutParentDataInput!
  where: OrganizationalUnitWhereUniqueInput!
}

input OrganizationalUnitWhereInput {
  AND: [OrganizationalUnitWhereInput!]
  businessRoles_every: BusinessRoleWhereInput
  businessRoles_none: BusinessRoleWhereInput
  businessRoles_some: BusinessRoleWhereInput
  children_every: OrganizationalUnitWhereInput
  children_none: OrganizationalUnitWhereInput
  children_some: OrganizationalUnitWhereInput
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [OrganizationalUnitWhereInput!]
  OR: [OrganizationalUnitWhereInput!]
  organizationalUnitType: OrganizationalUnitTypeWhereInput
  parent: OrganizationalUnitWhereInput
  processes_every: ProcessWhereInput
  processes_none: ProcessWhereInput
  processes_some: ProcessWhereInput
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input OrganizationalUnitWhereUniqueInput {
  id: ID
}

type OrganizationConnection {
  aggregate: AggregateOrganization!
  edges: [OrganizationEdge!]!
  pageInfo: PageInfo!
}

input OrganizationCreateInput {
  contactDetails: String!
  description: String
  dpo: String!
  headOffice: LocationCreateOneWithoutOrganizationInput!
  id: ID
  name: String!
  representative: String!
}

input OrganizationCreateOneWithoutHeadOfficeInput {
  connect: OrganizationWhereUniqueInput
  create: OrganizationCreateWithoutHeadOfficeInput
}

input OrganizationCreateWithoutHeadOfficeInput {
  contactDetails: String!
  description: String
  dpo: String!
  id: ID
  name: String!
  representative: String!
}

type OrganizationEdge {
  cursor: String!
  node: Organization!
}

enum OrganizationOrderByInput {
  contactDetails_ASC
  contactDetails_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  dpo_ASC
  dpo_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  representative_ASC
  representative_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input OrganizationUpdateInput {
  contactDetails: String
  description: String
  dpo: String
  headOffice: LocationUpdateOneRequiredWithoutOrganizationInput
  name: String
  representative: String
}

input OrganizationUpdateManyMutationInput {
  contactDetails: String
  description: String
  dpo: String
  name: String
  representative: String
}

input OrganizationUpdateOneWithoutHeadOfficeInput {
  connect: OrganizationWhereUniqueInput
  create: OrganizationCreateWithoutHeadOfficeInput
  delete: Boolean
  disconnect: Boolean
  update: OrganizationUpdateWithoutHeadOfficeDataInput
  upsert: OrganizationUpsertWithoutHeadOfficeInput
}

input OrganizationUpdateWithoutHeadOfficeDataInput {
  contactDetails: String
  description: String
  dpo: String
  name: String
  representative: String
}

input OrganizationUpsertWithoutHeadOfficeInput {
  create: OrganizationCreateWithoutHeadOfficeInput!
  update: OrganizationUpdateWithoutHeadOfficeDataInput!
}

input OrganizationWhereInput {
  AND: [OrganizationWhereInput!]
  contactDetails: String
  contactDetails_contains: String
  contactDetails_ends_with: String
  contactDetails_gt: String
  contactDetails_gte: String
  contactDetails_in: [String!]
  contactDetails_lt: String
  contactDetails_lte: String
  contactDetails_not: String
  contactDetails_not_contains: String
  contactDetails_not_ends_with: String
  contactDetails_not_in: [String!]
  contactDetails_not_starts_with: String
  contactDetails_starts_with: String
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  dpo: String
  dpo_contains: String
  dpo_ends_with: String
  dpo_gt: String
  dpo_gte: String
  dpo_in: [String!]
  dpo_lt: String
  dpo_lte: String
  dpo_not: String
  dpo_not_contains: String
  dpo_not_ends_with: String
  dpo_not_in: [String!]
  dpo_not_starts_with: String
  dpo_starts_with: String
  headOffice: LocationWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [OrganizationWhereInput!]
  OR: [OrganizationWhereInput!]
  representative: String
  representative_contains: String
  representative_ends_with: String
  representative_gt: String
  representative_gte: String
  representative_in: [String!]
  representative_lt: String
  representative_lte: String
  representative_not: String
  representative_not_contains: String
  representative_not_ends_with: String
  representative_not_in: [String!]
  representative_not_starts_with: String
  representative_starts_with: String
}

input OrganizationWhereUniqueInput {
  id: ID
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

enum PERMISSION {
  ADMIN
  AUDIT
}

type Person {
  id: ID!
  name: String!
  roles(after: String, before: String, first: Int, last: Int, orderBy: BusinessRoleOrderByInput, skip: Int, where: BusinessRoleWhereInput): [BusinessRole!]
  surname: String
  user: User
}

type PersonConnection {
  aggregate: AggregatePerson!
  edges: [PersonEdge!]!
  pageInfo: PageInfo!
}

input PersonCreateInput {
  id: ID
  name: String!
  roles: BusinessRoleCreateManyWithoutPersonInput
  surname: String
  user: UserCreateOneWithoutPersonInput
}

input PersonCreateOneWithoutRolesInput {
  connect: PersonWhereUniqueInput
  create: PersonCreateWithoutRolesInput
}

input PersonCreateOneWithoutUserInput {
  connect: PersonWhereUniqueInput
  create: PersonCreateWithoutUserInput
}

input PersonCreateWithoutRolesInput {
  id: ID
  name: String!
  surname: String
  user: UserCreateOneWithoutPersonInput
}

input PersonCreateWithoutUserInput {
  id: ID
  name: String!
  roles: BusinessRoleCreateManyWithoutPersonInput
  surname: String
}

type PersonEdge {
  cursor: String!
  node: Person!
}

enum PersonOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  surname_ASC
  surname_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input PersonUpdateInput {
  name: String
  roles: BusinessRoleUpdateManyWithoutPersonInput
  surname: String
  user: UserUpdateOneWithoutPersonInput
}

input PersonUpdateManyMutationInput {
  name: String
  surname: String
}

input PersonUpdateOneWithoutRolesInput {
  connect: PersonWhereUniqueInput
  create: PersonCreateWithoutRolesInput
  delete: Boolean
  disconnect: Boolean
  update: PersonUpdateWithoutRolesDataInput
  upsert: PersonUpsertWithoutRolesInput
}

input PersonUpdateOneWithoutUserInput {
  connect: PersonWhereUniqueInput
  create: PersonCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: PersonUpdateWithoutUserDataInput
  upsert: PersonUpsertWithoutUserInput
}

input PersonUpdateWithoutRolesDataInput {
  name: String
  surname: String
  user: UserUpdateOneWithoutPersonInput
}

input PersonUpdateWithoutUserDataInput {
  name: String
  roles: BusinessRoleUpdateManyWithoutPersonInput
  surname: String
}

input PersonUpsertWithoutRolesInput {
  create: PersonCreateWithoutRolesInput!
  update: PersonUpdateWithoutRolesDataInput!
}

input PersonUpsertWithoutUserInput {
  create: PersonCreateWithoutUserInput!
  update: PersonUpdateWithoutUserDataInput!
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  roles_every: BusinessRoleWhereInput
  roles_none: BusinessRoleWhereInput
  roles_some: BusinessRoleWhereInput
  surname: String
  surname_contains: String
  surname_ends_with: String
  surname_gt: String
  surname_gte: String
  surname_in: [String!]
  surname_lt: String
  surname_lte: String
  surname_not: String
  surname_not_contains: String
  surname_not_ends_with: String
  surname_not_in: [String!]
  surname_not_starts_with: String
  surname_starts_with: String
  user: UserWhereInput
}

input PersonWhereUniqueInput {
  id: ID
}

type Process {
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  organizationalUnit: OrganizationalUnit
  processingActivities(after: String, before: String, first: Int, last: Int, orderBy: ProcessingActivityOrderByInput, skip: Int, where: ProcessingActivityWhereInput): [ProcessingActivity!]
  processOwner: BusinessRole
  updatedAt: DateTime!
}

type ProcessConnection {
  aggregate: AggregateProcess!
  edges: [ProcessEdge!]!
  pageInfo: PageInfo!
}

input ProcessCreateInput {
  description: String
  id: ID
  name: String!
  organizationalUnit: OrganizationalUnitCreateOneWithoutProcessesInput
  processingActivities: ProcessingActivityCreateManyWithoutProcessInput
  processOwner: BusinessRoleCreateOneWithoutProcessInput
}

input ProcessCreateManyWithoutOrganizationalUnitInput {
  connect: [ProcessWhereUniqueInput!]
  create: [ProcessCreateWithoutOrganizationalUnitInput!]
}

input ProcessCreateManyWithoutProcessOwnerInput {
  connect: [ProcessWhereUniqueInput!]
  create: [ProcessCreateWithoutProcessOwnerInput!]
}

input ProcessCreateOneWithoutProcessingActivitiesInput {
  connect: ProcessWhereUniqueInput
  create: ProcessCreateWithoutProcessingActivitiesInput
}

input ProcessCreateWithoutOrganizationalUnitInput {
  description: String
  id: ID
  name: String!
  processingActivities: ProcessingActivityCreateManyWithoutProcessInput
  processOwner: BusinessRoleCreateOneWithoutProcessInput
}

input ProcessCreateWithoutProcessingActivitiesInput {
  description: String
  id: ID
  name: String!
  organizationalUnit: OrganizationalUnitCreateOneWithoutProcessesInput
  processOwner: BusinessRoleCreateOneWithoutProcessInput
}

input ProcessCreateWithoutProcessOwnerInput {
  description: String
  id: ID
  name: String!
  organizationalUnit: OrganizationalUnitCreateOneWithoutProcessesInput
  processingActivities: ProcessingActivityCreateManyWithoutProcessInput
}

type ProcessEdge {
  cursor: String!
  node: Process!
}

type ProcessingActivity {
  applications(after: String, before: String, first: Int, last: Int, orderBy: ApplicationOrderByInput, skip: Int, where: ApplicationWhereInput): [Application!]
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  process: Process
  purpose: String
  updatedAt: DateTime!
}

type ProcessingActivityConnection {
  aggregate: AggregateProcessingActivity!
  edges: [ProcessingActivityEdge!]!
  pageInfo: PageInfo!
}

input ProcessingActivityCreateInput {
  applications: ApplicationCreateManyWithoutProcessingActivitiesInput
  description: String
  id: ID
  name: String!
  process: ProcessCreateOneWithoutProcessingActivitiesInput
  purpose: String
}

input ProcessingActivityCreateManyWithoutApplicationsInput {
  connect: [ProcessingActivityWhereUniqueInput!]
  create: [ProcessingActivityCreateWithoutApplicationsInput!]
}

input ProcessingActivityCreateManyWithoutProcessInput {
  connect: [ProcessingActivityWhereUniqueInput!]
  create: [ProcessingActivityCreateWithoutProcessInput!]
}

input ProcessingActivityCreateWithoutApplicationsInput {
  description: String
  id: ID
  name: String!
  process: ProcessCreateOneWithoutProcessingActivitiesInput
  purpose: String
}

input ProcessingActivityCreateWithoutProcessInput {
  applications: ApplicationCreateManyWithoutProcessingActivitiesInput
  description: String
  id: ID
  name: String!
  purpose: String
}

type ProcessingActivityEdge {
  cursor: String!
  node: ProcessingActivity!
}

enum ProcessingActivityOrderByInput {
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  purpose_ASC
  purpose_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ProcessingActivityScalarWhereInput {
  AND: [ProcessingActivityScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ProcessingActivityScalarWhereInput!]
  OR: [ProcessingActivityScalarWhereInput!]
  purpose: String
  purpose_contains: String
  purpose_ends_with: String
  purpose_gt: String
  purpose_gte: String
  purpose_in: [String!]
  purpose_lt: String
  purpose_lte: String
  purpose_not: String
  purpose_not_contains: String
  purpose_not_ends_with: String
  purpose_not_in: [String!]
  purpose_not_starts_with: String
  purpose_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input ProcessingActivityUpdateInput {
  applications: ApplicationUpdateManyWithoutProcessingActivitiesInput
  description: String
  name: String
  process: ProcessUpdateOneWithoutProcessingActivitiesInput
  purpose: String
}

input ProcessingActivityUpdateManyDataInput {
  description: String
  name: String
  purpose: String
}

input ProcessingActivityUpdateManyMutationInput {
  description: String
  name: String
  purpose: String
}

input ProcessingActivityUpdateManyWithoutApplicationsInput {
  connect: [ProcessingActivityWhereUniqueInput!]
  create: [ProcessingActivityCreateWithoutApplicationsInput!]
  delete: [ProcessingActivityWhereUniqueInput!]
  deleteMany: [ProcessingActivityScalarWhereInput!]
  disconnect: [ProcessingActivityWhereUniqueInput!]
  set: [ProcessingActivityWhereUniqueInput!]
  update: [ProcessingActivityUpdateWithWhereUniqueWithoutApplicationsInput!]
  updateMany: [ProcessingActivityUpdateManyWithWhereNestedInput!]
  upsert: [ProcessingActivityUpsertWithWhereUniqueWithoutApplicationsInput!]
}

input ProcessingActivityUpdateManyWithoutProcessInput {
  connect: [ProcessingActivityWhereUniqueInput!]
  create: [ProcessingActivityCreateWithoutProcessInput!]
  delete: [ProcessingActivityWhereUniqueInput!]
  deleteMany: [ProcessingActivityScalarWhereInput!]
  disconnect: [ProcessingActivityWhereUniqueInput!]
  set: [ProcessingActivityWhereUniqueInput!]
  update: [ProcessingActivityUpdateWithWhereUniqueWithoutProcessInput!]
  updateMany: [ProcessingActivityUpdateManyWithWhereNestedInput!]
  upsert: [ProcessingActivityUpsertWithWhereUniqueWithoutProcessInput!]
}

input ProcessingActivityUpdateManyWithWhereNestedInput {
  data: ProcessingActivityUpdateManyDataInput!
  where: ProcessingActivityScalarWhereInput!
}

input ProcessingActivityUpdateWithoutApplicationsDataInput {
  description: String
  name: String
  process: ProcessUpdateOneWithoutProcessingActivitiesInput
  purpose: String
}

input ProcessingActivityUpdateWithoutProcessDataInput {
  applications: ApplicationUpdateManyWithoutProcessingActivitiesInput
  description: String
  name: String
  purpose: String
}

input ProcessingActivityUpdateWithWhereUniqueWithoutApplicationsInput {
  data: ProcessingActivityUpdateWithoutApplicationsDataInput!
  where: ProcessingActivityWhereUniqueInput!
}

input ProcessingActivityUpdateWithWhereUniqueWithoutProcessInput {
  data: ProcessingActivityUpdateWithoutProcessDataInput!
  where: ProcessingActivityWhereUniqueInput!
}

input ProcessingActivityUpsertWithWhereUniqueWithoutApplicationsInput {
  create: ProcessingActivityCreateWithoutApplicationsInput!
  update: ProcessingActivityUpdateWithoutApplicationsDataInput!
  where: ProcessingActivityWhereUniqueInput!
}

input ProcessingActivityUpsertWithWhereUniqueWithoutProcessInput {
  create: ProcessingActivityCreateWithoutProcessInput!
  update: ProcessingActivityUpdateWithoutProcessDataInput!
  where: ProcessingActivityWhereUniqueInput!
}

input ProcessingActivityWhereInput {
  AND: [ProcessingActivityWhereInput!]
  applications_every: ApplicationWhereInput
  applications_none: ApplicationWhereInput
  applications_some: ApplicationWhereInput
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ProcessingActivityWhereInput!]
  OR: [ProcessingActivityWhereInput!]
  process: ProcessWhereInput
  purpose: String
  purpose_contains: String
  purpose_ends_with: String
  purpose_gt: String
  purpose_gte: String
  purpose_in: [String!]
  purpose_lt: String
  purpose_lte: String
  purpose_not: String
  purpose_not_contains: String
  purpose_not_ends_with: String
  purpose_not_in: [String!]
  purpose_not_starts_with: String
  purpose_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input ProcessingActivityWhereUniqueInput {
  id: ID
}

enum ProcessOrderByInput {
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ProcessScalarWhereInput {
  AND: [ProcessScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ProcessScalarWhereInput!]
  OR: [ProcessScalarWhereInput!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input ProcessUpdateInput {
  description: String
  name: String
  organizationalUnit: OrganizationalUnitUpdateOneWithoutProcessesInput
  processingActivities: ProcessingActivityUpdateManyWithoutProcessInput
  processOwner: BusinessRoleUpdateOneWithoutProcessInput
}

input ProcessUpdateManyDataInput {
  description: String
  name: String
}

input ProcessUpdateManyMutationInput {
  description: String
  name: String
}

input ProcessUpdateManyWithoutOrganizationalUnitInput {
  connect: [ProcessWhereUniqueInput!]
  create: [ProcessCreateWithoutOrganizationalUnitInput!]
  delete: [ProcessWhereUniqueInput!]
  deleteMany: [ProcessScalarWhereInput!]
  disconnect: [ProcessWhereUniqueInput!]
  set: [ProcessWhereUniqueInput!]
  update: [ProcessUpdateWithWhereUniqueWithoutOrganizationalUnitInput!]
  updateMany: [ProcessUpdateManyWithWhereNestedInput!]
  upsert: [ProcessUpsertWithWhereUniqueWithoutOrganizationalUnitInput!]
}

input ProcessUpdateManyWithoutProcessOwnerInput {
  connect: [ProcessWhereUniqueInput!]
  create: [ProcessCreateWithoutProcessOwnerInput!]
  delete: [ProcessWhereUniqueInput!]
  deleteMany: [ProcessScalarWhereInput!]
  disconnect: [ProcessWhereUniqueInput!]
  set: [ProcessWhereUniqueInput!]
  update: [ProcessUpdateWithWhereUniqueWithoutProcessOwnerInput!]
  updateMany: [ProcessUpdateManyWithWhereNestedInput!]
  upsert: [ProcessUpsertWithWhereUniqueWithoutProcessOwnerInput!]
}

input ProcessUpdateManyWithWhereNestedInput {
  data: ProcessUpdateManyDataInput!
  where: ProcessScalarWhereInput!
}

input ProcessUpdateOneWithoutProcessingActivitiesInput {
  connect: ProcessWhereUniqueInput
  create: ProcessCreateWithoutProcessingActivitiesInput
  delete: Boolean
  disconnect: Boolean
  update: ProcessUpdateWithoutProcessingActivitiesDataInput
  upsert: ProcessUpsertWithoutProcessingActivitiesInput
}

input ProcessUpdateWithoutOrganizationalUnitDataInput {
  description: String
  name: String
  processingActivities: ProcessingActivityUpdateManyWithoutProcessInput
  processOwner: BusinessRoleUpdateOneWithoutProcessInput
}

input ProcessUpdateWithoutProcessingActivitiesDataInput {
  description: String
  name: String
  organizationalUnit: OrganizationalUnitUpdateOneWithoutProcessesInput
  processOwner: BusinessRoleUpdateOneWithoutProcessInput
}

input ProcessUpdateWithoutProcessOwnerDataInput {
  description: String
  name: String
  organizationalUnit: OrganizationalUnitUpdateOneWithoutProcessesInput
  processingActivities: ProcessingActivityUpdateManyWithoutProcessInput
}

input ProcessUpdateWithWhereUniqueWithoutOrganizationalUnitInput {
  data: ProcessUpdateWithoutOrganizationalUnitDataInput!
  where: ProcessWhereUniqueInput!
}

input ProcessUpdateWithWhereUniqueWithoutProcessOwnerInput {
  data: ProcessUpdateWithoutProcessOwnerDataInput!
  where: ProcessWhereUniqueInput!
}

input ProcessUpsertWithoutProcessingActivitiesInput {
  create: ProcessCreateWithoutProcessingActivitiesInput!
  update: ProcessUpdateWithoutProcessingActivitiesDataInput!
}

input ProcessUpsertWithWhereUniqueWithoutOrganizationalUnitInput {
  create: ProcessCreateWithoutOrganizationalUnitInput!
  update: ProcessUpdateWithoutOrganizationalUnitDataInput!
  where: ProcessWhereUniqueInput!
}

input ProcessUpsertWithWhereUniqueWithoutProcessOwnerInput {
  create: ProcessCreateWithoutProcessOwnerInput!
  update: ProcessUpdateWithoutProcessOwnerDataInput!
  where: ProcessWhereUniqueInput!
}

input ProcessWhereInput {
  AND: [ProcessWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ProcessWhereInput!]
  OR: [ProcessWhereInput!]
  organizationalUnit: OrganizationalUnitWhereInput
  processingActivities_every: ProcessingActivityWhereInput
  processingActivities_none: ProcessingActivityWhereInput
  processingActivities_some: ProcessingActivityWhereInput
  processOwner: BusinessRoleWhereInput
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input ProcessWhereUniqueInput {
  id: ID
}

type QualityAttribute {
  appliesToObject: CLASSIFICATIONOBJECT!
  classificationLabels(after: String, before: String, first: Int, last: Int, orderBy: ClassificationLabelOrderByInput, skip: Int, where: ClassificationLabelWhereInput): [ClassificationLabel!]
  description: String
  id: ID!
  name: String!
}

type QualityAttributeConnection {
  aggregate: AggregateQualityAttribute!
  edges: [QualityAttributeEdge!]!
  pageInfo: PageInfo!
}

input QualityAttributeCreateInput {
  appliesToObject: CLASSIFICATIONOBJECT!
  classificationLabels: ClassificationLabelCreateManyWithoutQualityAttributeInput
  description: String
  id: ID
  name: String!
}

input QualityAttributeCreateOneWithoutClassificationLabelsInput {
  connect: QualityAttributeWhereUniqueInput
  create: QualityAttributeCreateWithoutClassificationLabelsInput
}

input QualityAttributeCreateWithoutClassificationLabelsInput {
  appliesToObject: CLASSIFICATIONOBJECT!
  description: String
  id: ID
  name: String!
}

type QualityAttributeEdge {
  cursor: String!
  node: QualityAttribute!
}

enum QualityAttributeOrderByInput {
  appliesToObject_ASC
  appliesToObject_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input QualityAttributeUpdateInput {
  appliesToObject: CLASSIFICATIONOBJECT
  classificationLabels: ClassificationLabelUpdateManyWithoutQualityAttributeInput
  description: String
  name: String
}

input QualityAttributeUpdateManyMutationInput {
  appliesToObject: CLASSIFICATIONOBJECT
  description: String
  name: String
}

input QualityAttributeUpdateOneWithoutClassificationLabelsInput {
  connect: QualityAttributeWhereUniqueInput
  create: QualityAttributeCreateWithoutClassificationLabelsInput
  delete: Boolean
  disconnect: Boolean
  update: QualityAttributeUpdateWithoutClassificationLabelsDataInput
  upsert: QualityAttributeUpsertWithoutClassificationLabelsInput
}

input QualityAttributeUpdateWithoutClassificationLabelsDataInput {
  appliesToObject: CLASSIFICATIONOBJECT
  description: String
  name: String
}

input QualityAttributeUpsertWithoutClassificationLabelsInput {
  create: QualityAttributeCreateWithoutClassificationLabelsInput!
  update: QualityAttributeUpdateWithoutClassificationLabelsDataInput!
}

input QualityAttributeWhereInput {
  AND: [QualityAttributeWhereInput!]
  appliesToObject: CLASSIFICATIONOBJECT
  appliesToObject_in: [CLASSIFICATIONOBJECT!]
  appliesToObject_not: CLASSIFICATIONOBJECT
  appliesToObject_not_in: [CLASSIFICATIONOBJECT!]
  classificationLabels_every: ClassificationLabelWhereInput
  classificationLabels_none: ClassificationLabelWhereInput
  classificationLabels_some: ClassificationLabelWhereInput
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [QualityAttributeWhereInput!]
  OR: [QualityAttributeWhereInput!]
}

input QualityAttributeWhereUniqueInput {
  id: ID
}

type Query {
  application(where: ApplicationWhereUniqueInput!): Application
  applications(after: String, before: String, first: Int, last: Int, orderBy: ApplicationOrderByInput, skip: Int, where: ApplicationWhereInput): [Application!]!
  applicationsConnection(after: String, before: String, first: Int, last: Int, orderBy: ApplicationOrderByInput, skip: Int, where: ApplicationWhereInput): ApplicationConnection!
  businessRole(where: BusinessRoleWhereUniqueInput!): BusinessRole
  businessRoleByOu(where: OrganizationalUnitWhereUniqueInput!): [BusinessRole!]
  businessRoles(after: String, before: String, first: Int, last: Int, orderBy: BusinessRoleOrderByInput, skip: Int, where: BusinessRoleWhereInput): [BusinessRole!]!
  businessRolesConnection(after: String, before: String, first: Int, last: Int, orderBy: BusinessRoleOrderByInput, skip: Int, where: BusinessRoleWhereInput): BusinessRoleConnection!
  classificationLabel(where: ClassificationLabelWhereUniqueInput!): ClassificationLabel
  classificationLabels(after: String, before: String, first: Int, last: Int, orderBy: ClassificationLabelOrderByInput, skip: Int, where: ClassificationLabelWhereInput): [ClassificationLabel!]!
  classificationLabelsConnection(after: String, before: String, first: Int, last: Int, orderBy: ClassificationLabelOrderByInput, skip: Int, where: ClassificationLabelWhereInput): ClassificationLabelConnection!
  dataType(where: DataTypeWhereUniqueInput!): DataType
  dataTypes(after: String, before: String, first: Int, last: Int, orderBy: DataTypeOrderByInput, skip: Int, where: DataTypeWhereInput): [DataType!]!
  dataTypesConnection(after: String, before: String, first: Int, last: Int, orderBy: DataTypeOrderByInput, skip: Int, where: DataTypeWhereInput): DataTypeConnection!
  location(where: LocationWhereUniqueInput!): Location
  locations(after: String, before: String, first: Int, last: Int, orderBy: LocationOrderByInput, skip: Int, where: LocationWhereInput): [Location!]!
  locationsConnection(after: String, before: String, first: Int, last: Int, orderBy: LocationOrderByInput, skip: Int, where: LocationWhereInput): LocationConnection!
  loggedInUser: User
  organization(where: OrganizationWhereUniqueInput!): Organization
  organizationalUnit(where: OrganizationalUnitWhereUniqueInput!): OrganizationalUnit
  organizationalUnits(after: String, before: String, first: Int, last: Int, orderBy: OrganizationalUnitOrderByInput, skip: Int, where: OrganizationalUnitWhereInput): [OrganizationalUnit!]!
  organizationalUnitsConnection(after: String, before: String, first: Int, last: Int, orderBy: OrganizationalUnitOrderByInput, skip: Int, where: OrganizationalUnitWhereInput): OrganizationalUnitConnection!
  organizationalUnitType(where: OrganizationalUnitTypeWhereUniqueInput!): OrganizationalUnitType
  organizationalUnitTypes(after: String, before: String, first: Int, last: Int, orderBy: OrganizationalUnitTypeOrderByInput, skip: Int, where: OrganizationalUnitTypeWhereInput): [OrganizationalUnitType!]!
  organizationalUnitTypesConnection(after: String, before: String, first: Int, last: Int, orderBy: OrganizationalUnitTypeOrderByInput, skip: Int, where: OrganizationalUnitTypeWhereInput): OrganizationalUnitTypeConnection!
  organizations(after: String, before: String, first: Int, last: Int, orderBy: OrganizationOrderByInput, skip: Int, where: OrganizationWhereInput): [Organization!]!
  organizationsConnection(after: String, before: String, first: Int, last: Int, orderBy: OrganizationOrderByInput, skip: Int, where: OrganizationWhereInput): OrganizationConnection!
  person(where: PersonWhereUniqueInput!): Person
  persons(after: String, before: String, first: Int, last: Int, orderBy: PersonOrderByInput, skip: Int, where: PersonWhereInput): [Person!]!
  personsConnection(after: String, before: String, first: Int, last: Int, orderBy: PersonOrderByInput, skip: Int, where: PersonWhereInput): PersonConnection!
  process(where: ProcessWhereUniqueInput!): Process
  processByOu(where: ProcessWhereUniqueInput!): [Process!]
  processes(after: String, before: String, first: Int, last: Int, orderBy: ProcessOrderByInput, skip: Int, where: ProcessWhereInput): [Process!]!
  processesConnection(after: String, before: String, first: Int, last: Int, orderBy: ProcessOrderByInput, skip: Int, where: ProcessWhereInput): ProcessConnection!
  processingActivities(after: String, before: String, first: Int, last: Int, orderBy: ProcessingActivityOrderByInput, skip: Int, where: ProcessingActivityWhereInput): [ProcessingActivity!]!
  processingActivitiesByOu(where: ProcessingActivityWhereUniqueInput!): [ProcessingActivity!]
  processingActivitiesConnection(after: String, before: String, first: Int, last: Int, orderBy: ProcessingActivityOrderByInput, skip: Int, where: ProcessingActivityWhereInput): ProcessingActivityConnection!
  processingActivity(where: ProcessingActivityWhereUniqueInput!): ProcessingActivity
  qualityAttribute(where: QualityAttributeWhereUniqueInput!): QualityAttribute
  qualityAttributes(after: String, before: String, first: Int, last: Int, orderBy: QualityAttributeOrderByInput, skip: Int, where: QualityAttributeWhereInput): [QualityAttribute!]!
  qualityAttributesConnection(after: String, before: String, first: Int, last: Int, orderBy: QualityAttributeOrderByInput, skip: Int, where: QualityAttributeWhereInput): QualityAttributeConnection!
  user(where: UserWhereUniqueInput!): User
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  usersConnection(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): UserConnection!
}

enum RACI {
  ACCOUNTABLE
  CONSULTED
  INFORMED
  RESPONDSABLE
}

type Token {
  token: String
}

type User {
  active: Boolean
  createdAt: DateTime!
  email: String!
  id: ID!
  person: Person
  specialPermissions: [PERMISSION!]!
  updatedAt: DateTime!
}

type UserConnection {
  aggregate: AggregateUser!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

input UserCreateInput {
  active: Boolean
  email: String!
  id: ID
  password: String!
  person: PersonCreateOneWithoutUserInput
  specialPermissions: UserCreatespecialPermissionsInput
}

input UserCreateOneWithoutPersonInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPersonInput
}

input UserCreatespecialPermissionsInput {
  set: [PERMISSION!]
}

input UserCreateWithoutPersonInput {
  active: Boolean
  email: String!
  id: ID
  password: String!
  specialPermissions: UserCreatespecialPermissionsInput
}

type UserEdge {
  cursor: String!
  node: User!
}

enum UserOrderByInput {
  active_ASC
  active_DESC
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserUpdateInput {
  active: Boolean
  email: String
  password: String
  person: PersonUpdateOneWithoutUserInput
  specialPermissions: UserUpdatespecialPermissionsInput
}

input UserUpdateManyMutationInput {
  active: Boolean
  email: String
  password: String
  specialPermissions: UserUpdatespecialPermissionsInput
}

input UserUpdateOneWithoutPersonInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPersonInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutPersonDataInput
  upsert: UserUpsertWithoutPersonInput
}

input UserUpdatespecialPermissionsInput {
  set: [PERMISSION!]
}

input UserUpdateWithoutPersonDataInput {
  active: Boolean
  email: String
  password: String
  specialPermissions: UserUpdatespecialPermissionsInput
}

input UserUpsertWithoutPersonInput {
  create: UserCreateWithoutPersonInput!
  update: UserUpdateWithoutPersonDataInput!
}

input UserWhereInput {
  active: Boolean
  active_not: Boolean
  AND: [UserWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: String
  password_contains: String
  password_ends_with: String
  password_gt: String
  password_gte: String
  password_in: [String!]
  password_lt: String
  password_lte: String
  password_not: String
  password_not_contains: String
  password_not_ends_with: String
  password_not_in: [String!]
  password_not_starts_with: String
  password_starts_with: String
  person: PersonWhereInput
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
