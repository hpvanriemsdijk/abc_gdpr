// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateApplication {
  count: Int!
}

type AggregateBusinessRole {
  count: Int!
}

type AggregateClassificationLabel {
  count: Int!
}

type AggregateDataType {
  count: Int!
}

type AggregateOrganizationalUnit {
  count: Int!
}

type AggregateOrganizationalUnitType {
  count: Int!
}

type AggregatePerson {
  count: Int!
}

type AggregateProcess {
  count: Int!
}

type AggregateProcessingActivity {
  count: Int!
}

type AggregateQualityAttribute {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Application {
  id: ID!
  name: String!
  alias: Json
  description: String
  processingActivities(where: ProcessingActivityWhereInput, orderBy: ProcessingActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProcessingActivity!]
  dataTypes(where: DataTypeWhereInput, orderBy: DataTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DataType!]
  businessOwner: BusinessRole
  itOwner: BusinessRole
  securityAdministrator: BusinessRole
}

type ApplicationConnection {
  pageInfo: PageInfo!
  edges: [ApplicationEdge]!
  aggregate: AggregateApplication!
}

input ApplicationCreateInput {
  id: ID
  name: String!
  alias: Json
  description: String
  processingActivities: ProcessingActivityCreateManyWithoutApplicationsInput
  dataTypes: DataTypeCreateManyWithoutApplicationInput
  businessOwner: BusinessRoleCreateOneWithoutAppBusinessOwnerInput
  itOwner: BusinessRoleCreateOneWithoutAppItOwnerInput
  securityAdministrator: BusinessRoleCreateOneWithoutAppSecAdminInput
}

input ApplicationCreateManyWithoutBusinessOwnerInput {
  create: [ApplicationCreateWithoutBusinessOwnerInput!]
  connect: [ApplicationWhereUniqueInput!]
}

input ApplicationCreateManyWithoutDataTypesInput {
  create: [ApplicationCreateWithoutDataTypesInput!]
  connect: [ApplicationWhereUniqueInput!]
}

input ApplicationCreateManyWithoutItOwnerInput {
  create: [ApplicationCreateWithoutItOwnerInput!]
  connect: [ApplicationWhereUniqueInput!]
}

input ApplicationCreateManyWithoutProcessingActivitiesInput {
  create: [ApplicationCreateWithoutProcessingActivitiesInput!]
  connect: [ApplicationWhereUniqueInput!]
}

input ApplicationCreateManyWithoutSecurityAdministratorInput {
  create: [ApplicationCreateWithoutSecurityAdministratorInput!]
  connect: [ApplicationWhereUniqueInput!]
}

input ApplicationCreateWithoutBusinessOwnerInput {
  id: ID
  name: String!
  alias: Json
  description: String
  processingActivities: ProcessingActivityCreateManyWithoutApplicationsInput
  dataTypes: DataTypeCreateManyWithoutApplicationInput
  itOwner: BusinessRoleCreateOneWithoutAppItOwnerInput
  securityAdministrator: BusinessRoleCreateOneWithoutAppSecAdminInput
}

input ApplicationCreateWithoutDataTypesInput {
  id: ID
  name: String!
  alias: Json
  description: String
  processingActivities: ProcessingActivityCreateManyWithoutApplicationsInput
  businessOwner: BusinessRoleCreateOneWithoutAppBusinessOwnerInput
  itOwner: BusinessRoleCreateOneWithoutAppItOwnerInput
  securityAdministrator: BusinessRoleCreateOneWithoutAppSecAdminInput
}

input ApplicationCreateWithoutItOwnerInput {
  id: ID
  name: String!
  alias: Json
  description: String
  processingActivities: ProcessingActivityCreateManyWithoutApplicationsInput
  dataTypes: DataTypeCreateManyWithoutApplicationInput
  businessOwner: BusinessRoleCreateOneWithoutAppBusinessOwnerInput
  securityAdministrator: BusinessRoleCreateOneWithoutAppSecAdminInput
}

input ApplicationCreateWithoutProcessingActivitiesInput {
  id: ID
  name: String!
  alias: Json
  description: String
  dataTypes: DataTypeCreateManyWithoutApplicationInput
  businessOwner: BusinessRoleCreateOneWithoutAppBusinessOwnerInput
  itOwner: BusinessRoleCreateOneWithoutAppItOwnerInput
  securityAdministrator: BusinessRoleCreateOneWithoutAppSecAdminInput
}

input ApplicationCreateWithoutSecurityAdministratorInput {
  id: ID
  name: String!
  alias: Json
  description: String
  processingActivities: ProcessingActivityCreateManyWithoutApplicationsInput
  dataTypes: DataTypeCreateManyWithoutApplicationInput
  businessOwner: BusinessRoleCreateOneWithoutAppBusinessOwnerInput
  itOwner: BusinessRoleCreateOneWithoutAppItOwnerInput
}

type ApplicationEdge {
  node: Application!
  cursor: String!
}

enum ApplicationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  alias_ASC
  alias_DESC
  description_ASC
  description_DESC
}

type ApplicationPreviousValues {
  id: ID!
  name: String!
  alias: Json
  description: String
}

input ApplicationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [ApplicationScalarWhereInput!]
  OR: [ApplicationScalarWhereInput!]
  NOT: [ApplicationScalarWhereInput!]
}

type ApplicationSubscriptionPayload {
  mutation: MutationType!
  node: Application
  updatedFields: [String!]
  previousValues: ApplicationPreviousValues
}

input ApplicationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ApplicationWhereInput
  AND: [ApplicationSubscriptionWhereInput!]
  OR: [ApplicationSubscriptionWhereInput!]
  NOT: [ApplicationSubscriptionWhereInput!]
}

input ApplicationUpdateInput {
  name: String
  alias: Json
  description: String
  processingActivities: ProcessingActivityUpdateManyWithoutApplicationsInput
  dataTypes: DataTypeUpdateManyWithoutApplicationInput
  businessOwner: BusinessRoleUpdateOneWithoutAppBusinessOwnerInput
  itOwner: BusinessRoleUpdateOneWithoutAppItOwnerInput
  securityAdministrator: BusinessRoleUpdateOneWithoutAppSecAdminInput
}

input ApplicationUpdateManyDataInput {
  name: String
  alias: Json
  description: String
}

input ApplicationUpdateManyMutationInput {
  name: String
  alias: Json
  description: String
}

input ApplicationUpdateManyWithoutBusinessOwnerInput {
  create: [ApplicationCreateWithoutBusinessOwnerInput!]
  delete: [ApplicationWhereUniqueInput!]
  connect: [ApplicationWhereUniqueInput!]
  set: [ApplicationWhereUniqueInput!]
  disconnect: [ApplicationWhereUniqueInput!]
  update: [ApplicationUpdateWithWhereUniqueWithoutBusinessOwnerInput!]
  upsert: [ApplicationUpsertWithWhereUniqueWithoutBusinessOwnerInput!]
  deleteMany: [ApplicationScalarWhereInput!]
  updateMany: [ApplicationUpdateManyWithWhereNestedInput!]
}

input ApplicationUpdateManyWithoutDataTypesInput {
  create: [ApplicationCreateWithoutDataTypesInput!]
  delete: [ApplicationWhereUniqueInput!]
  connect: [ApplicationWhereUniqueInput!]
  set: [ApplicationWhereUniqueInput!]
  disconnect: [ApplicationWhereUniqueInput!]
  update: [ApplicationUpdateWithWhereUniqueWithoutDataTypesInput!]
  upsert: [ApplicationUpsertWithWhereUniqueWithoutDataTypesInput!]
  deleteMany: [ApplicationScalarWhereInput!]
  updateMany: [ApplicationUpdateManyWithWhereNestedInput!]
}

input ApplicationUpdateManyWithoutItOwnerInput {
  create: [ApplicationCreateWithoutItOwnerInput!]
  delete: [ApplicationWhereUniqueInput!]
  connect: [ApplicationWhereUniqueInput!]
  set: [ApplicationWhereUniqueInput!]
  disconnect: [ApplicationWhereUniqueInput!]
  update: [ApplicationUpdateWithWhereUniqueWithoutItOwnerInput!]
  upsert: [ApplicationUpsertWithWhereUniqueWithoutItOwnerInput!]
  deleteMany: [ApplicationScalarWhereInput!]
  updateMany: [ApplicationUpdateManyWithWhereNestedInput!]
}

input ApplicationUpdateManyWithoutProcessingActivitiesInput {
  create: [ApplicationCreateWithoutProcessingActivitiesInput!]
  delete: [ApplicationWhereUniqueInput!]
  connect: [ApplicationWhereUniqueInput!]
  set: [ApplicationWhereUniqueInput!]
  disconnect: [ApplicationWhereUniqueInput!]
  update: [ApplicationUpdateWithWhereUniqueWithoutProcessingActivitiesInput!]
  upsert: [ApplicationUpsertWithWhereUniqueWithoutProcessingActivitiesInput!]
  deleteMany: [ApplicationScalarWhereInput!]
  updateMany: [ApplicationUpdateManyWithWhereNestedInput!]
}

input ApplicationUpdateManyWithoutSecurityAdministratorInput {
  create: [ApplicationCreateWithoutSecurityAdministratorInput!]
  delete: [ApplicationWhereUniqueInput!]
  connect: [ApplicationWhereUniqueInput!]
  set: [ApplicationWhereUniqueInput!]
  disconnect: [ApplicationWhereUniqueInput!]
  update: [ApplicationUpdateWithWhereUniqueWithoutSecurityAdministratorInput!]
  upsert: [ApplicationUpsertWithWhereUniqueWithoutSecurityAdministratorInput!]
  deleteMany: [ApplicationScalarWhereInput!]
  updateMany: [ApplicationUpdateManyWithWhereNestedInput!]
}

input ApplicationUpdateManyWithWhereNestedInput {
  where: ApplicationScalarWhereInput!
  data: ApplicationUpdateManyDataInput!
}

input ApplicationUpdateWithoutBusinessOwnerDataInput {
  name: String
  alias: Json
  description: String
  processingActivities: ProcessingActivityUpdateManyWithoutApplicationsInput
  dataTypes: DataTypeUpdateManyWithoutApplicationInput
  itOwner: BusinessRoleUpdateOneWithoutAppItOwnerInput
  securityAdministrator: BusinessRoleUpdateOneWithoutAppSecAdminInput
}

input ApplicationUpdateWithoutDataTypesDataInput {
  name: String
  alias: Json
  description: String
  processingActivities: ProcessingActivityUpdateManyWithoutApplicationsInput
  businessOwner: BusinessRoleUpdateOneWithoutAppBusinessOwnerInput
  itOwner: BusinessRoleUpdateOneWithoutAppItOwnerInput
  securityAdministrator: BusinessRoleUpdateOneWithoutAppSecAdminInput
}

input ApplicationUpdateWithoutItOwnerDataInput {
  name: String
  alias: Json
  description: String
  processingActivities: ProcessingActivityUpdateManyWithoutApplicationsInput
  dataTypes: DataTypeUpdateManyWithoutApplicationInput
  businessOwner: BusinessRoleUpdateOneWithoutAppBusinessOwnerInput
  securityAdministrator: BusinessRoleUpdateOneWithoutAppSecAdminInput
}

input ApplicationUpdateWithoutProcessingActivitiesDataInput {
  name: String
  alias: Json
  description: String
  dataTypes: DataTypeUpdateManyWithoutApplicationInput
  businessOwner: BusinessRoleUpdateOneWithoutAppBusinessOwnerInput
  itOwner: BusinessRoleUpdateOneWithoutAppItOwnerInput
  securityAdministrator: BusinessRoleUpdateOneWithoutAppSecAdminInput
}

input ApplicationUpdateWithoutSecurityAdministratorDataInput {
  name: String
  alias: Json
  description: String
  processingActivities: ProcessingActivityUpdateManyWithoutApplicationsInput
  dataTypes: DataTypeUpdateManyWithoutApplicationInput
  businessOwner: BusinessRoleUpdateOneWithoutAppBusinessOwnerInput
  itOwner: BusinessRoleUpdateOneWithoutAppItOwnerInput
}

input ApplicationUpdateWithWhereUniqueWithoutBusinessOwnerInput {
  where: ApplicationWhereUniqueInput!
  data: ApplicationUpdateWithoutBusinessOwnerDataInput!
}

input ApplicationUpdateWithWhereUniqueWithoutDataTypesInput {
  where: ApplicationWhereUniqueInput!
  data: ApplicationUpdateWithoutDataTypesDataInput!
}

input ApplicationUpdateWithWhereUniqueWithoutItOwnerInput {
  where: ApplicationWhereUniqueInput!
  data: ApplicationUpdateWithoutItOwnerDataInput!
}

input ApplicationUpdateWithWhereUniqueWithoutProcessingActivitiesInput {
  where: ApplicationWhereUniqueInput!
  data: ApplicationUpdateWithoutProcessingActivitiesDataInput!
}

input ApplicationUpdateWithWhereUniqueWithoutSecurityAdministratorInput {
  where: ApplicationWhereUniqueInput!
  data: ApplicationUpdateWithoutSecurityAdministratorDataInput!
}

input ApplicationUpsertWithWhereUniqueWithoutBusinessOwnerInput {
  where: ApplicationWhereUniqueInput!
  update: ApplicationUpdateWithoutBusinessOwnerDataInput!
  create: ApplicationCreateWithoutBusinessOwnerInput!
}

input ApplicationUpsertWithWhereUniqueWithoutDataTypesInput {
  where: ApplicationWhereUniqueInput!
  update: ApplicationUpdateWithoutDataTypesDataInput!
  create: ApplicationCreateWithoutDataTypesInput!
}

input ApplicationUpsertWithWhereUniqueWithoutItOwnerInput {
  where: ApplicationWhereUniqueInput!
  update: ApplicationUpdateWithoutItOwnerDataInput!
  create: ApplicationCreateWithoutItOwnerInput!
}

input ApplicationUpsertWithWhereUniqueWithoutProcessingActivitiesInput {
  where: ApplicationWhereUniqueInput!
  update: ApplicationUpdateWithoutProcessingActivitiesDataInput!
  create: ApplicationCreateWithoutProcessingActivitiesInput!
}

input ApplicationUpsertWithWhereUniqueWithoutSecurityAdministratorInput {
  where: ApplicationWhereUniqueInput!
  update: ApplicationUpdateWithoutSecurityAdministratorDataInput!
  create: ApplicationCreateWithoutSecurityAdministratorInput!
}

input ApplicationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  processingActivities_every: ProcessingActivityWhereInput
  processingActivities_some: ProcessingActivityWhereInput
  processingActivities_none: ProcessingActivityWhereInput
  dataTypes_every: DataTypeWhereInput
  dataTypes_some: DataTypeWhereInput
  dataTypes_none: DataTypeWhereInput
  businessOwner: BusinessRoleWhereInput
  itOwner: BusinessRoleWhereInput
  securityAdministrator: BusinessRoleWhereInput
  AND: [ApplicationWhereInput!]
  OR: [ApplicationWhereInput!]
  NOT: [ApplicationWhereInput!]
}

input ApplicationWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

type BusinessRole {
  id: ID!
  name: String!
  description: String
  raciPrivacy: RACI
  raciSecurity: RACI
  raciFinancial: RACI
  raciExecutive: RACI
  person: Person
  organizationalUnit: OrganizationalUnit!
  process(where: ProcessWhereInput, orderBy: ProcessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Process!]
  appBusinessOwner(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Application!]
  appItOwner(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Application!]
  appSecAdmin(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Application!]
}

type BusinessRoleConnection {
  pageInfo: PageInfo!
  edges: [BusinessRoleEdge]!
  aggregate: AggregateBusinessRole!
}

input BusinessRoleCreateInput {
  id: ID
  name: String!
  description: String
  raciPrivacy: RACI
  raciSecurity: RACI
  raciFinancial: RACI
  raciExecutive: RACI
  person: PersonCreateOneWithoutRolesInput
  organizationalUnit: OrganizationalUnitCreateOneWithoutBusinessRolesInput!
  process: ProcessCreateManyWithoutProcessOwnerInput
  appBusinessOwner: ApplicationCreateManyWithoutBusinessOwnerInput
  appItOwner: ApplicationCreateManyWithoutItOwnerInput
  appSecAdmin: ApplicationCreateManyWithoutSecurityAdministratorInput
}

input BusinessRoleCreateManyWithoutOrganizationalUnitInput {
  create: [BusinessRoleCreateWithoutOrganizationalUnitInput!]
  connect: [BusinessRoleWhereUniqueInput!]
}

input BusinessRoleCreateManyWithoutPersonInput {
  create: [BusinessRoleCreateWithoutPersonInput!]
  connect: [BusinessRoleWhereUniqueInput!]
}

input BusinessRoleCreateOneWithoutAppBusinessOwnerInput {
  create: BusinessRoleCreateWithoutAppBusinessOwnerInput
  connect: BusinessRoleWhereUniqueInput
}

input BusinessRoleCreateOneWithoutAppItOwnerInput {
  create: BusinessRoleCreateWithoutAppItOwnerInput
  connect: BusinessRoleWhereUniqueInput
}

input BusinessRoleCreateOneWithoutAppSecAdminInput {
  create: BusinessRoleCreateWithoutAppSecAdminInput
  connect: BusinessRoleWhereUniqueInput
}

input BusinessRoleCreateOneWithoutProcessInput {
  create: BusinessRoleCreateWithoutProcessInput
  connect: BusinessRoleWhereUniqueInput
}

input BusinessRoleCreateWithoutAppBusinessOwnerInput {
  id: ID
  name: String!
  description: String
  raciPrivacy: RACI
  raciSecurity: RACI
  raciFinancial: RACI
  raciExecutive: RACI
  person: PersonCreateOneWithoutRolesInput
  organizationalUnit: OrganizationalUnitCreateOneWithoutBusinessRolesInput!
  process: ProcessCreateManyWithoutProcessOwnerInput
  appItOwner: ApplicationCreateManyWithoutItOwnerInput
  appSecAdmin: ApplicationCreateManyWithoutSecurityAdministratorInput
}

input BusinessRoleCreateWithoutAppItOwnerInput {
  id: ID
  name: String!
  description: String
  raciPrivacy: RACI
  raciSecurity: RACI
  raciFinancial: RACI
  raciExecutive: RACI
  person: PersonCreateOneWithoutRolesInput
  organizationalUnit: OrganizationalUnitCreateOneWithoutBusinessRolesInput!
  process: ProcessCreateManyWithoutProcessOwnerInput
  appBusinessOwner: ApplicationCreateManyWithoutBusinessOwnerInput
  appSecAdmin: ApplicationCreateManyWithoutSecurityAdministratorInput
}

input BusinessRoleCreateWithoutAppSecAdminInput {
  id: ID
  name: String!
  description: String
  raciPrivacy: RACI
  raciSecurity: RACI
  raciFinancial: RACI
  raciExecutive: RACI
  person: PersonCreateOneWithoutRolesInput
  organizationalUnit: OrganizationalUnitCreateOneWithoutBusinessRolesInput!
  process: ProcessCreateManyWithoutProcessOwnerInput
  appBusinessOwner: ApplicationCreateManyWithoutBusinessOwnerInput
  appItOwner: ApplicationCreateManyWithoutItOwnerInput
}

input BusinessRoleCreateWithoutOrganizationalUnitInput {
  id: ID
  name: String!
  description: String
  raciPrivacy: RACI
  raciSecurity: RACI
  raciFinancial: RACI
  raciExecutive: RACI
  person: PersonCreateOneWithoutRolesInput
  process: ProcessCreateManyWithoutProcessOwnerInput
  appBusinessOwner: ApplicationCreateManyWithoutBusinessOwnerInput
  appItOwner: ApplicationCreateManyWithoutItOwnerInput
  appSecAdmin: ApplicationCreateManyWithoutSecurityAdministratorInput
}

input BusinessRoleCreateWithoutPersonInput {
  id: ID
  name: String!
  description: String
  raciPrivacy: RACI
  raciSecurity: RACI
  raciFinancial: RACI
  raciExecutive: RACI
  organizationalUnit: OrganizationalUnitCreateOneWithoutBusinessRolesInput!
  process: ProcessCreateManyWithoutProcessOwnerInput
  appBusinessOwner: ApplicationCreateManyWithoutBusinessOwnerInput
  appItOwner: ApplicationCreateManyWithoutItOwnerInput
  appSecAdmin: ApplicationCreateManyWithoutSecurityAdministratorInput
}

input BusinessRoleCreateWithoutProcessInput {
  id: ID
  name: String!
  description: String
  raciPrivacy: RACI
  raciSecurity: RACI
  raciFinancial: RACI
  raciExecutive: RACI
  person: PersonCreateOneWithoutRolesInput
  organizationalUnit: OrganizationalUnitCreateOneWithoutBusinessRolesInput!
  appBusinessOwner: ApplicationCreateManyWithoutBusinessOwnerInput
  appItOwner: ApplicationCreateManyWithoutItOwnerInput
  appSecAdmin: ApplicationCreateManyWithoutSecurityAdministratorInput
}

type BusinessRoleEdge {
  node: BusinessRole!
  cursor: String!
}

enum BusinessRoleOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  raciPrivacy_ASC
  raciPrivacy_DESC
  raciSecurity_ASC
  raciSecurity_DESC
  raciFinancial_ASC
  raciFinancial_DESC
  raciExecutive_ASC
  raciExecutive_DESC
}

type BusinessRolePreviousValues {
  id: ID!
  name: String!
  description: String
  raciPrivacy: RACI
  raciSecurity: RACI
  raciFinancial: RACI
  raciExecutive: RACI
}

input BusinessRoleScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  raciPrivacy: RACI
  raciPrivacy_not: RACI
  raciPrivacy_in: [RACI!]
  raciPrivacy_not_in: [RACI!]
  raciSecurity: RACI
  raciSecurity_not: RACI
  raciSecurity_in: [RACI!]
  raciSecurity_not_in: [RACI!]
  raciFinancial: RACI
  raciFinancial_not: RACI
  raciFinancial_in: [RACI!]
  raciFinancial_not_in: [RACI!]
  raciExecutive: RACI
  raciExecutive_not: RACI
  raciExecutive_in: [RACI!]
  raciExecutive_not_in: [RACI!]
  AND: [BusinessRoleScalarWhereInput!]
  OR: [BusinessRoleScalarWhereInput!]
  NOT: [BusinessRoleScalarWhereInput!]
}

type BusinessRoleSubscriptionPayload {
  mutation: MutationType!
  node: BusinessRole
  updatedFields: [String!]
  previousValues: BusinessRolePreviousValues
}

input BusinessRoleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BusinessRoleWhereInput
  AND: [BusinessRoleSubscriptionWhereInput!]
  OR: [BusinessRoleSubscriptionWhereInput!]
  NOT: [BusinessRoleSubscriptionWhereInput!]
}

input BusinessRoleUpdateInput {
  name: String
  description: String
  raciPrivacy: RACI
  raciSecurity: RACI
  raciFinancial: RACI
  raciExecutive: RACI
  person: PersonUpdateOneWithoutRolesInput
  organizationalUnit: OrganizationalUnitUpdateOneRequiredWithoutBusinessRolesInput
  process: ProcessUpdateManyWithoutProcessOwnerInput
  appBusinessOwner: ApplicationUpdateManyWithoutBusinessOwnerInput
  appItOwner: ApplicationUpdateManyWithoutItOwnerInput
  appSecAdmin: ApplicationUpdateManyWithoutSecurityAdministratorInput
}

input BusinessRoleUpdateManyDataInput {
  name: String
  description: String
  raciPrivacy: RACI
  raciSecurity: RACI
  raciFinancial: RACI
  raciExecutive: RACI
}

input BusinessRoleUpdateManyMutationInput {
  name: String
  description: String
  raciPrivacy: RACI
  raciSecurity: RACI
  raciFinancial: RACI
  raciExecutive: RACI
}

input BusinessRoleUpdateManyWithoutOrganizationalUnitInput {
  create: [BusinessRoleCreateWithoutOrganizationalUnitInput!]
  delete: [BusinessRoleWhereUniqueInput!]
  connect: [BusinessRoleWhereUniqueInput!]
  set: [BusinessRoleWhereUniqueInput!]
  disconnect: [BusinessRoleWhereUniqueInput!]
  update: [BusinessRoleUpdateWithWhereUniqueWithoutOrganizationalUnitInput!]
  upsert: [BusinessRoleUpsertWithWhereUniqueWithoutOrganizationalUnitInput!]
  deleteMany: [BusinessRoleScalarWhereInput!]
  updateMany: [BusinessRoleUpdateManyWithWhereNestedInput!]
}

input BusinessRoleUpdateManyWithoutPersonInput {
  create: [BusinessRoleCreateWithoutPersonInput!]
  delete: [BusinessRoleWhereUniqueInput!]
  connect: [BusinessRoleWhereUniqueInput!]
  set: [BusinessRoleWhereUniqueInput!]
  disconnect: [BusinessRoleWhereUniqueInput!]
  update: [BusinessRoleUpdateWithWhereUniqueWithoutPersonInput!]
  upsert: [BusinessRoleUpsertWithWhereUniqueWithoutPersonInput!]
  deleteMany: [BusinessRoleScalarWhereInput!]
  updateMany: [BusinessRoleUpdateManyWithWhereNestedInput!]
}

input BusinessRoleUpdateManyWithWhereNestedInput {
  where: BusinessRoleScalarWhereInput!
  data: BusinessRoleUpdateManyDataInput!
}

input BusinessRoleUpdateOneWithoutAppBusinessOwnerInput {
  create: BusinessRoleCreateWithoutAppBusinessOwnerInput
  update: BusinessRoleUpdateWithoutAppBusinessOwnerDataInput
  upsert: BusinessRoleUpsertWithoutAppBusinessOwnerInput
  delete: Boolean
  disconnect: Boolean
  connect: BusinessRoleWhereUniqueInput
}

input BusinessRoleUpdateOneWithoutAppItOwnerInput {
  create: BusinessRoleCreateWithoutAppItOwnerInput
  update: BusinessRoleUpdateWithoutAppItOwnerDataInput
  upsert: BusinessRoleUpsertWithoutAppItOwnerInput
  delete: Boolean
  disconnect: Boolean
  connect: BusinessRoleWhereUniqueInput
}

input BusinessRoleUpdateOneWithoutAppSecAdminInput {
  create: BusinessRoleCreateWithoutAppSecAdminInput
  update: BusinessRoleUpdateWithoutAppSecAdminDataInput
  upsert: BusinessRoleUpsertWithoutAppSecAdminInput
  delete: Boolean
  disconnect: Boolean
  connect: BusinessRoleWhereUniqueInput
}

input BusinessRoleUpdateOneWithoutProcessInput {
  create: BusinessRoleCreateWithoutProcessInput
  update: BusinessRoleUpdateWithoutProcessDataInput
  upsert: BusinessRoleUpsertWithoutProcessInput
  delete: Boolean
  disconnect: Boolean
  connect: BusinessRoleWhereUniqueInput
}

input BusinessRoleUpdateWithoutAppBusinessOwnerDataInput {
  name: String
  description: String
  raciPrivacy: RACI
  raciSecurity: RACI
  raciFinancial: RACI
  raciExecutive: RACI
  person: PersonUpdateOneWithoutRolesInput
  organizationalUnit: OrganizationalUnitUpdateOneRequiredWithoutBusinessRolesInput
  process: ProcessUpdateManyWithoutProcessOwnerInput
  appItOwner: ApplicationUpdateManyWithoutItOwnerInput
  appSecAdmin: ApplicationUpdateManyWithoutSecurityAdministratorInput
}

input BusinessRoleUpdateWithoutAppItOwnerDataInput {
  name: String
  description: String
  raciPrivacy: RACI
  raciSecurity: RACI
  raciFinancial: RACI
  raciExecutive: RACI
  person: PersonUpdateOneWithoutRolesInput
  organizationalUnit: OrganizationalUnitUpdateOneRequiredWithoutBusinessRolesInput
  process: ProcessUpdateManyWithoutProcessOwnerInput
  appBusinessOwner: ApplicationUpdateManyWithoutBusinessOwnerInput
  appSecAdmin: ApplicationUpdateManyWithoutSecurityAdministratorInput
}

input BusinessRoleUpdateWithoutAppSecAdminDataInput {
  name: String
  description: String
  raciPrivacy: RACI
  raciSecurity: RACI
  raciFinancial: RACI
  raciExecutive: RACI
  person: PersonUpdateOneWithoutRolesInput
  organizationalUnit: OrganizationalUnitUpdateOneRequiredWithoutBusinessRolesInput
  process: ProcessUpdateManyWithoutProcessOwnerInput
  appBusinessOwner: ApplicationUpdateManyWithoutBusinessOwnerInput
  appItOwner: ApplicationUpdateManyWithoutItOwnerInput
}

input BusinessRoleUpdateWithoutOrganizationalUnitDataInput {
  name: String
  description: String
  raciPrivacy: RACI
  raciSecurity: RACI
  raciFinancial: RACI
  raciExecutive: RACI
  person: PersonUpdateOneWithoutRolesInput
  process: ProcessUpdateManyWithoutProcessOwnerInput
  appBusinessOwner: ApplicationUpdateManyWithoutBusinessOwnerInput
  appItOwner: ApplicationUpdateManyWithoutItOwnerInput
  appSecAdmin: ApplicationUpdateManyWithoutSecurityAdministratorInput
}

input BusinessRoleUpdateWithoutPersonDataInput {
  name: String
  description: String
  raciPrivacy: RACI
  raciSecurity: RACI
  raciFinancial: RACI
  raciExecutive: RACI
  organizationalUnit: OrganizationalUnitUpdateOneRequiredWithoutBusinessRolesInput
  process: ProcessUpdateManyWithoutProcessOwnerInput
  appBusinessOwner: ApplicationUpdateManyWithoutBusinessOwnerInput
  appItOwner: ApplicationUpdateManyWithoutItOwnerInput
  appSecAdmin: ApplicationUpdateManyWithoutSecurityAdministratorInput
}

input BusinessRoleUpdateWithoutProcessDataInput {
  name: String
  description: String
  raciPrivacy: RACI
  raciSecurity: RACI
  raciFinancial: RACI
  raciExecutive: RACI
  person: PersonUpdateOneWithoutRolesInput
  organizationalUnit: OrganizationalUnitUpdateOneRequiredWithoutBusinessRolesInput
  appBusinessOwner: ApplicationUpdateManyWithoutBusinessOwnerInput
  appItOwner: ApplicationUpdateManyWithoutItOwnerInput
  appSecAdmin: ApplicationUpdateManyWithoutSecurityAdministratorInput
}

input BusinessRoleUpdateWithWhereUniqueWithoutOrganizationalUnitInput {
  where: BusinessRoleWhereUniqueInput!
  data: BusinessRoleUpdateWithoutOrganizationalUnitDataInput!
}

input BusinessRoleUpdateWithWhereUniqueWithoutPersonInput {
  where: BusinessRoleWhereUniqueInput!
  data: BusinessRoleUpdateWithoutPersonDataInput!
}

input BusinessRoleUpsertWithoutAppBusinessOwnerInput {
  update: BusinessRoleUpdateWithoutAppBusinessOwnerDataInput!
  create: BusinessRoleCreateWithoutAppBusinessOwnerInput!
}

input BusinessRoleUpsertWithoutAppItOwnerInput {
  update: BusinessRoleUpdateWithoutAppItOwnerDataInput!
  create: BusinessRoleCreateWithoutAppItOwnerInput!
}

input BusinessRoleUpsertWithoutAppSecAdminInput {
  update: BusinessRoleUpdateWithoutAppSecAdminDataInput!
  create: BusinessRoleCreateWithoutAppSecAdminInput!
}

input BusinessRoleUpsertWithoutProcessInput {
  update: BusinessRoleUpdateWithoutProcessDataInput!
  create: BusinessRoleCreateWithoutProcessInput!
}

input BusinessRoleUpsertWithWhereUniqueWithoutOrganizationalUnitInput {
  where: BusinessRoleWhereUniqueInput!
  update: BusinessRoleUpdateWithoutOrganizationalUnitDataInput!
  create: BusinessRoleCreateWithoutOrganizationalUnitInput!
}

input BusinessRoleUpsertWithWhereUniqueWithoutPersonInput {
  where: BusinessRoleWhereUniqueInput!
  update: BusinessRoleUpdateWithoutPersonDataInput!
  create: BusinessRoleCreateWithoutPersonInput!
}

input BusinessRoleWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  raciPrivacy: RACI
  raciPrivacy_not: RACI
  raciPrivacy_in: [RACI!]
  raciPrivacy_not_in: [RACI!]
  raciSecurity: RACI
  raciSecurity_not: RACI
  raciSecurity_in: [RACI!]
  raciSecurity_not_in: [RACI!]
  raciFinancial: RACI
  raciFinancial_not: RACI
  raciFinancial_in: [RACI!]
  raciFinancial_not_in: [RACI!]
  raciExecutive: RACI
  raciExecutive_not: RACI
  raciExecutive_in: [RACI!]
  raciExecutive_not_in: [RACI!]
  person: PersonWhereInput
  organizationalUnit: OrganizationalUnitWhereInput
  process_every: ProcessWhereInput
  process_some: ProcessWhereInput
  process_none: ProcessWhereInput
  appBusinessOwner_every: ApplicationWhereInput
  appBusinessOwner_some: ApplicationWhereInput
  appBusinessOwner_none: ApplicationWhereInput
  appItOwner_every: ApplicationWhereInput
  appItOwner_some: ApplicationWhereInput
  appItOwner_none: ApplicationWhereInput
  appSecAdmin_every: ApplicationWhereInput
  appSecAdmin_some: ApplicationWhereInput
  appSecAdmin_none: ApplicationWhereInput
  AND: [BusinessRoleWhereInput!]
  OR: [BusinessRoleWhereInput!]
  NOT: [BusinessRoleWhereInput!]
}

input BusinessRoleWhereUniqueInput {
  id: ID
}

type ClassificationLabel {
  id: ID!
  score: Int!
  label: String!
  criteria: String
  qualityAttribute: QualityAttribute
  dataType(where: DataTypeWhereInput, orderBy: DataTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DataType!]
}

type ClassificationLabelConnection {
  pageInfo: PageInfo!
  edges: [ClassificationLabelEdge]!
  aggregate: AggregateClassificationLabel!
}

input ClassificationLabelCreateInput {
  id: ID
  score: Int!
  label: String!
  criteria: String
  qualityAttribute: QualityAttributeCreateOneWithoutClassificationLabelsInput
  dataType: DataTypeCreateManyWithoutClassificationLabelsInput
}

input ClassificationLabelCreateManyWithoutDataTypeInput {
  create: [ClassificationLabelCreateWithoutDataTypeInput!]
  connect: [ClassificationLabelWhereUniqueInput!]
}

input ClassificationLabelCreateManyWithoutQualityAttributeInput {
  create: [ClassificationLabelCreateWithoutQualityAttributeInput!]
  connect: [ClassificationLabelWhereUniqueInput!]
}

input ClassificationLabelCreateWithoutDataTypeInput {
  id: ID
  score: Int!
  label: String!
  criteria: String
  qualityAttribute: QualityAttributeCreateOneWithoutClassificationLabelsInput
}

input ClassificationLabelCreateWithoutQualityAttributeInput {
  id: ID
  score: Int!
  label: String!
  criteria: String
  dataType: DataTypeCreateManyWithoutClassificationLabelsInput
}

type ClassificationLabelEdge {
  node: ClassificationLabel!
  cursor: String!
}

enum ClassificationLabelOrderByInput {
  id_ASC
  id_DESC
  score_ASC
  score_DESC
  label_ASC
  label_DESC
  criteria_ASC
  criteria_DESC
}

type ClassificationLabelPreviousValues {
  id: ID!
  score: Int!
  label: String!
  criteria: String
}

input ClassificationLabelScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  score: Int
  score_not: Int
  score_in: [Int!]
  score_not_in: [Int!]
  score_lt: Int
  score_lte: Int
  score_gt: Int
  score_gte: Int
  label: String
  label_not: String
  label_in: [String!]
  label_not_in: [String!]
  label_lt: String
  label_lte: String
  label_gt: String
  label_gte: String
  label_contains: String
  label_not_contains: String
  label_starts_with: String
  label_not_starts_with: String
  label_ends_with: String
  label_not_ends_with: String
  criteria: String
  criteria_not: String
  criteria_in: [String!]
  criteria_not_in: [String!]
  criteria_lt: String
  criteria_lte: String
  criteria_gt: String
  criteria_gte: String
  criteria_contains: String
  criteria_not_contains: String
  criteria_starts_with: String
  criteria_not_starts_with: String
  criteria_ends_with: String
  criteria_not_ends_with: String
  AND: [ClassificationLabelScalarWhereInput!]
  OR: [ClassificationLabelScalarWhereInput!]
  NOT: [ClassificationLabelScalarWhereInput!]
}

type ClassificationLabelSubscriptionPayload {
  mutation: MutationType!
  node: ClassificationLabel
  updatedFields: [String!]
  previousValues: ClassificationLabelPreviousValues
}

input ClassificationLabelSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ClassificationLabelWhereInput
  AND: [ClassificationLabelSubscriptionWhereInput!]
  OR: [ClassificationLabelSubscriptionWhereInput!]
  NOT: [ClassificationLabelSubscriptionWhereInput!]
}

input ClassificationLabelUpdateInput {
  score: Int
  label: String
  criteria: String
  qualityAttribute: QualityAttributeUpdateOneWithoutClassificationLabelsInput
  dataType: DataTypeUpdateManyWithoutClassificationLabelsInput
}

input ClassificationLabelUpdateManyDataInput {
  score: Int
  label: String
  criteria: String
}

input ClassificationLabelUpdateManyMutationInput {
  score: Int
  label: String
  criteria: String
}

input ClassificationLabelUpdateManyWithoutDataTypeInput {
  create: [ClassificationLabelCreateWithoutDataTypeInput!]
  delete: [ClassificationLabelWhereUniqueInput!]
  connect: [ClassificationLabelWhereUniqueInput!]
  set: [ClassificationLabelWhereUniqueInput!]
  disconnect: [ClassificationLabelWhereUniqueInput!]
  update: [ClassificationLabelUpdateWithWhereUniqueWithoutDataTypeInput!]
  upsert: [ClassificationLabelUpsertWithWhereUniqueWithoutDataTypeInput!]
  deleteMany: [ClassificationLabelScalarWhereInput!]
  updateMany: [ClassificationLabelUpdateManyWithWhereNestedInput!]
}

input ClassificationLabelUpdateManyWithoutQualityAttributeInput {
  create: [ClassificationLabelCreateWithoutQualityAttributeInput!]
  delete: [ClassificationLabelWhereUniqueInput!]
  connect: [ClassificationLabelWhereUniqueInput!]
  set: [ClassificationLabelWhereUniqueInput!]
  disconnect: [ClassificationLabelWhereUniqueInput!]
  update: [ClassificationLabelUpdateWithWhereUniqueWithoutQualityAttributeInput!]
  upsert: [ClassificationLabelUpsertWithWhereUniqueWithoutQualityAttributeInput!]
  deleteMany: [ClassificationLabelScalarWhereInput!]
  updateMany: [ClassificationLabelUpdateManyWithWhereNestedInput!]
}

input ClassificationLabelUpdateManyWithWhereNestedInput {
  where: ClassificationLabelScalarWhereInput!
  data: ClassificationLabelUpdateManyDataInput!
}

input ClassificationLabelUpdateWithoutDataTypeDataInput {
  score: Int
  label: String
  criteria: String
  qualityAttribute: QualityAttributeUpdateOneWithoutClassificationLabelsInput
}

input ClassificationLabelUpdateWithoutQualityAttributeDataInput {
  score: Int
  label: String
  criteria: String
  dataType: DataTypeUpdateManyWithoutClassificationLabelsInput
}

input ClassificationLabelUpdateWithWhereUniqueWithoutDataTypeInput {
  where: ClassificationLabelWhereUniqueInput!
  data: ClassificationLabelUpdateWithoutDataTypeDataInput!
}

input ClassificationLabelUpdateWithWhereUniqueWithoutQualityAttributeInput {
  where: ClassificationLabelWhereUniqueInput!
  data: ClassificationLabelUpdateWithoutQualityAttributeDataInput!
}

input ClassificationLabelUpsertWithWhereUniqueWithoutDataTypeInput {
  where: ClassificationLabelWhereUniqueInput!
  update: ClassificationLabelUpdateWithoutDataTypeDataInput!
  create: ClassificationLabelCreateWithoutDataTypeInput!
}

input ClassificationLabelUpsertWithWhereUniqueWithoutQualityAttributeInput {
  where: ClassificationLabelWhereUniqueInput!
  update: ClassificationLabelUpdateWithoutQualityAttributeDataInput!
  create: ClassificationLabelCreateWithoutQualityAttributeInput!
}

input ClassificationLabelWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  score: Int
  score_not: Int
  score_in: [Int!]
  score_not_in: [Int!]
  score_lt: Int
  score_lte: Int
  score_gt: Int
  score_gte: Int
  label: String
  label_not: String
  label_in: [String!]
  label_not_in: [String!]
  label_lt: String
  label_lte: String
  label_gt: String
  label_gte: String
  label_contains: String
  label_not_contains: String
  label_starts_with: String
  label_not_starts_with: String
  label_ends_with: String
  label_not_ends_with: String
  criteria: String
  criteria_not: String
  criteria_in: [String!]
  criteria_not_in: [String!]
  criteria_lt: String
  criteria_lte: String
  criteria_gt: String
  criteria_gte: String
  criteria_contains: String
  criteria_not_contains: String
  criteria_starts_with: String
  criteria_not_starts_with: String
  criteria_ends_with: String
  criteria_not_ends_with: String
  qualityAttribute: QualityAttributeWhereInput
  dataType_every: DataTypeWhereInput
  dataType_some: DataTypeWhereInput
  dataType_none: DataTypeWhereInput
  AND: [ClassificationLabelWhereInput!]
  OR: [ClassificationLabelWhereInput!]
  NOT: [ClassificationLabelWhereInput!]
}

input ClassificationLabelWhereUniqueInput {
  id: ID
}

enum CLASSIFICATIONOBJECT {
  DATA
  APPLICATION
}

type DataType {
  id: ID!
  name: String!
  description: String
  application(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Application!]
  classificationLabels(where: ClassificationLabelWhereInput, orderBy: ClassificationLabelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ClassificationLabel!]
}

type DataTypeConnection {
  pageInfo: PageInfo!
  edges: [DataTypeEdge]!
  aggregate: AggregateDataType!
}

input DataTypeCreateInput {
  id: ID
  name: String!
  description: String
  application: ApplicationCreateManyWithoutDataTypesInput
  classificationLabels: ClassificationLabelCreateManyWithoutDataTypeInput
}

input DataTypeCreateManyWithoutApplicationInput {
  create: [DataTypeCreateWithoutApplicationInput!]
  connect: [DataTypeWhereUniqueInput!]
}

input DataTypeCreateManyWithoutClassificationLabelsInput {
  create: [DataTypeCreateWithoutClassificationLabelsInput!]
  connect: [DataTypeWhereUniqueInput!]
}

input DataTypeCreateWithoutApplicationInput {
  id: ID
  name: String!
  description: String
  classificationLabels: ClassificationLabelCreateManyWithoutDataTypeInput
}

input DataTypeCreateWithoutClassificationLabelsInput {
  id: ID
  name: String!
  description: String
  application: ApplicationCreateManyWithoutDataTypesInput
}

type DataTypeEdge {
  node: DataType!
  cursor: String!
}

enum DataTypeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type DataTypePreviousValues {
  id: ID!
  name: String!
  description: String
}

input DataTypeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [DataTypeScalarWhereInput!]
  OR: [DataTypeScalarWhereInput!]
  NOT: [DataTypeScalarWhereInput!]
}

type DataTypeSubscriptionPayload {
  mutation: MutationType!
  node: DataType
  updatedFields: [String!]
  previousValues: DataTypePreviousValues
}

input DataTypeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DataTypeWhereInput
  AND: [DataTypeSubscriptionWhereInput!]
  OR: [DataTypeSubscriptionWhereInput!]
  NOT: [DataTypeSubscriptionWhereInput!]
}

input DataTypeUpdateInput {
  name: String
  description: String
  application: ApplicationUpdateManyWithoutDataTypesInput
  classificationLabels: ClassificationLabelUpdateManyWithoutDataTypeInput
}

input DataTypeUpdateManyDataInput {
  name: String
  description: String
}

input DataTypeUpdateManyMutationInput {
  name: String
  description: String
}

input DataTypeUpdateManyWithoutApplicationInput {
  create: [DataTypeCreateWithoutApplicationInput!]
  delete: [DataTypeWhereUniqueInput!]
  connect: [DataTypeWhereUniqueInput!]
  set: [DataTypeWhereUniqueInput!]
  disconnect: [DataTypeWhereUniqueInput!]
  update: [DataTypeUpdateWithWhereUniqueWithoutApplicationInput!]
  upsert: [DataTypeUpsertWithWhereUniqueWithoutApplicationInput!]
  deleteMany: [DataTypeScalarWhereInput!]
  updateMany: [DataTypeUpdateManyWithWhereNestedInput!]
}

input DataTypeUpdateManyWithoutClassificationLabelsInput {
  create: [DataTypeCreateWithoutClassificationLabelsInput!]
  delete: [DataTypeWhereUniqueInput!]
  connect: [DataTypeWhereUniqueInput!]
  set: [DataTypeWhereUniqueInput!]
  disconnect: [DataTypeWhereUniqueInput!]
  update: [DataTypeUpdateWithWhereUniqueWithoutClassificationLabelsInput!]
  upsert: [DataTypeUpsertWithWhereUniqueWithoutClassificationLabelsInput!]
  deleteMany: [DataTypeScalarWhereInput!]
  updateMany: [DataTypeUpdateManyWithWhereNestedInput!]
}

input DataTypeUpdateManyWithWhereNestedInput {
  where: DataTypeScalarWhereInput!
  data: DataTypeUpdateManyDataInput!
}

input DataTypeUpdateWithoutApplicationDataInput {
  name: String
  description: String
  classificationLabels: ClassificationLabelUpdateManyWithoutDataTypeInput
}

input DataTypeUpdateWithoutClassificationLabelsDataInput {
  name: String
  description: String
  application: ApplicationUpdateManyWithoutDataTypesInput
}

input DataTypeUpdateWithWhereUniqueWithoutApplicationInput {
  where: DataTypeWhereUniqueInput!
  data: DataTypeUpdateWithoutApplicationDataInput!
}

input DataTypeUpdateWithWhereUniqueWithoutClassificationLabelsInput {
  where: DataTypeWhereUniqueInput!
  data: DataTypeUpdateWithoutClassificationLabelsDataInput!
}

input DataTypeUpsertWithWhereUniqueWithoutApplicationInput {
  where: DataTypeWhereUniqueInput!
  update: DataTypeUpdateWithoutApplicationDataInput!
  create: DataTypeCreateWithoutApplicationInput!
}

input DataTypeUpsertWithWhereUniqueWithoutClassificationLabelsInput {
  where: DataTypeWhereUniqueInput!
  update: DataTypeUpdateWithoutClassificationLabelsDataInput!
  create: DataTypeCreateWithoutClassificationLabelsInput!
}

input DataTypeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  application_every: ApplicationWhereInput
  application_some: ApplicationWhereInput
  application_none: ApplicationWhereInput
  classificationLabels_every: ClassificationLabelWhereInput
  classificationLabels_some: ClassificationLabelWhereInput
  classificationLabels_none: ClassificationLabelWhereInput
  AND: [DataTypeWhereInput!]
  OR: [DataTypeWhereInput!]
  NOT: [DataTypeWhereInput!]
}

input DataTypeWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Json

scalar Long

type Mutation {
  createApplication(data: ApplicationCreateInput!): Application!
  updateApplication(data: ApplicationUpdateInput!, where: ApplicationWhereUniqueInput!): Application
  updateManyApplications(data: ApplicationUpdateManyMutationInput!, where: ApplicationWhereInput): BatchPayload!
  upsertApplication(where: ApplicationWhereUniqueInput!, create: ApplicationCreateInput!, update: ApplicationUpdateInput!): Application!
  deleteApplication(where: ApplicationWhereUniqueInput!): Application
  deleteManyApplications(where: ApplicationWhereInput): BatchPayload!
  createBusinessRole(data: BusinessRoleCreateInput!): BusinessRole!
  updateBusinessRole(data: BusinessRoleUpdateInput!, where: BusinessRoleWhereUniqueInput!): BusinessRole
  updateManyBusinessRoles(data: BusinessRoleUpdateManyMutationInput!, where: BusinessRoleWhereInput): BatchPayload!
  upsertBusinessRole(where: BusinessRoleWhereUniqueInput!, create: BusinessRoleCreateInput!, update: BusinessRoleUpdateInput!): BusinessRole!
  deleteBusinessRole(where: BusinessRoleWhereUniqueInput!): BusinessRole
  deleteManyBusinessRoles(where: BusinessRoleWhereInput): BatchPayload!
  createClassificationLabel(data: ClassificationLabelCreateInput!): ClassificationLabel!
  updateClassificationLabel(data: ClassificationLabelUpdateInput!, where: ClassificationLabelWhereUniqueInput!): ClassificationLabel
  updateManyClassificationLabels(data: ClassificationLabelUpdateManyMutationInput!, where: ClassificationLabelWhereInput): BatchPayload!
  upsertClassificationLabel(where: ClassificationLabelWhereUniqueInput!, create: ClassificationLabelCreateInput!, update: ClassificationLabelUpdateInput!): ClassificationLabel!
  deleteClassificationLabel(where: ClassificationLabelWhereUniqueInput!): ClassificationLabel
  deleteManyClassificationLabels(where: ClassificationLabelWhereInput): BatchPayload!
  createDataType(data: DataTypeCreateInput!): DataType!
  updateDataType(data: DataTypeUpdateInput!, where: DataTypeWhereUniqueInput!): DataType
  updateManyDataTypes(data: DataTypeUpdateManyMutationInput!, where: DataTypeWhereInput): BatchPayload!
  upsertDataType(where: DataTypeWhereUniqueInput!, create: DataTypeCreateInput!, update: DataTypeUpdateInput!): DataType!
  deleteDataType(where: DataTypeWhereUniqueInput!): DataType
  deleteManyDataTypes(where: DataTypeWhereInput): BatchPayload!
  createOrganizationalUnit(data: OrganizationalUnitCreateInput!): OrganizationalUnit!
  updateOrganizationalUnit(data: OrganizationalUnitUpdateInput!, where: OrganizationalUnitWhereUniqueInput!): OrganizationalUnit
  updateManyOrganizationalUnits(data: OrganizationalUnitUpdateManyMutationInput!, where: OrganizationalUnitWhereInput): BatchPayload!
  upsertOrganizationalUnit(where: OrganizationalUnitWhereUniqueInput!, create: OrganizationalUnitCreateInput!, update: OrganizationalUnitUpdateInput!): OrganizationalUnit!
  deleteOrganizationalUnit(where: OrganizationalUnitWhereUniqueInput!): OrganizationalUnit
  deleteManyOrganizationalUnits(where: OrganizationalUnitWhereInput): BatchPayload!
  createOrganizationalUnitType(data: OrganizationalUnitTypeCreateInput!): OrganizationalUnitType!
  updateOrganizationalUnitType(data: OrganizationalUnitTypeUpdateInput!, where: OrganizationalUnitTypeWhereUniqueInput!): OrganizationalUnitType
  updateManyOrganizationalUnitTypes(data: OrganizationalUnitTypeUpdateManyMutationInput!, where: OrganizationalUnitTypeWhereInput): BatchPayload!
  upsertOrganizationalUnitType(where: OrganizationalUnitTypeWhereUniqueInput!, create: OrganizationalUnitTypeCreateInput!, update: OrganizationalUnitTypeUpdateInput!): OrganizationalUnitType!
  deleteOrganizationalUnitType(where: OrganizationalUnitTypeWhereUniqueInput!): OrganizationalUnitType
  deleteManyOrganizationalUnitTypes(where: OrganizationalUnitTypeWhereInput): BatchPayload!
  createPerson(data: PersonCreateInput!): Person!
  updatePerson(data: PersonUpdateInput!, where: PersonWhereUniqueInput!): Person
  updateManyPersons(data: PersonUpdateManyMutationInput!, where: PersonWhereInput): BatchPayload!
  upsertPerson(where: PersonWhereUniqueInput!, create: PersonCreateInput!, update: PersonUpdateInput!): Person!
  deletePerson(where: PersonWhereUniqueInput!): Person
  deleteManyPersons(where: PersonWhereInput): BatchPayload!
  createProcess(data: ProcessCreateInput!): Process!
  updateProcess(data: ProcessUpdateInput!, where: ProcessWhereUniqueInput!): Process
  updateManyProcesses(data: ProcessUpdateManyMutationInput!, where: ProcessWhereInput): BatchPayload!
  upsertProcess(where: ProcessWhereUniqueInput!, create: ProcessCreateInput!, update: ProcessUpdateInput!): Process!
  deleteProcess(where: ProcessWhereUniqueInput!): Process
  deleteManyProcesses(where: ProcessWhereInput): BatchPayload!
  createProcessingActivity(data: ProcessingActivityCreateInput!): ProcessingActivity!
  updateProcessingActivity(data: ProcessingActivityUpdateInput!, where: ProcessingActivityWhereUniqueInput!): ProcessingActivity
  updateManyProcessingActivities(data: ProcessingActivityUpdateManyMutationInput!, where: ProcessingActivityWhereInput): BatchPayload!
  upsertProcessingActivity(where: ProcessingActivityWhereUniqueInput!, create: ProcessingActivityCreateInput!, update: ProcessingActivityUpdateInput!): ProcessingActivity!
  deleteProcessingActivity(where: ProcessingActivityWhereUniqueInput!): ProcessingActivity
  deleteManyProcessingActivities(where: ProcessingActivityWhereInput): BatchPayload!
  createQualityAttribute(data: QualityAttributeCreateInput!): QualityAttribute!
  updateQualityAttribute(data: QualityAttributeUpdateInput!, where: QualityAttributeWhereUniqueInput!): QualityAttribute
  updateManyQualityAttributes(data: QualityAttributeUpdateManyMutationInput!, where: QualityAttributeWhereInput): BatchPayload!
  upsertQualityAttribute(where: QualityAttributeWhereUniqueInput!, create: QualityAttributeCreateInput!, update: QualityAttributeUpdateInput!): QualityAttribute!
  deleteQualityAttribute(where: QualityAttributeWhereUniqueInput!): QualityAttribute
  deleteManyQualityAttributes(where: QualityAttributeWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type OrganizationalUnit {
  id: ID!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  children(where: OrganizationalUnitWhereInput, orderBy: OrganizationalUnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrganizationalUnit!]
  parent: OrganizationalUnit
  processes(where: ProcessWhereInput, orderBy: ProcessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Process!]
  businessRoles(where: BusinessRoleWhereInput, orderBy: BusinessRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BusinessRole!]
  organizationalUnitType: OrganizationalUnitType
}

type OrganizationalUnitConnection {
  pageInfo: PageInfo!
  edges: [OrganizationalUnitEdge]!
  aggregate: AggregateOrganizationalUnit!
}

input OrganizationalUnitCreateInput {
  id: ID
  name: String!
  description: String
  children: OrganizationalUnitCreateManyWithoutParentInput
  parent: OrganizationalUnitCreateOneWithoutChildrenInput
  processes: ProcessCreateManyWithoutOrganizationalUnitInput
  businessRoles: BusinessRoleCreateManyWithoutOrganizationalUnitInput
  organizationalUnitType: OrganizationalUnitTypeCreateOneWithoutOrganizationalUnitInput
}

input OrganizationalUnitCreateManyWithoutOrganizationalUnitTypeInput {
  create: [OrganizationalUnitCreateWithoutOrganizationalUnitTypeInput!]
  connect: [OrganizationalUnitWhereUniqueInput!]
}

input OrganizationalUnitCreateManyWithoutParentInput {
  create: [OrganizationalUnitCreateWithoutParentInput!]
  connect: [OrganizationalUnitWhereUniqueInput!]
}

input OrganizationalUnitCreateOneWithoutBusinessRolesInput {
  create: OrganizationalUnitCreateWithoutBusinessRolesInput
  connect: OrganizationalUnitWhereUniqueInput
}

input OrganizationalUnitCreateOneWithoutChildrenInput {
  create: OrganizationalUnitCreateWithoutChildrenInput
  connect: OrganizationalUnitWhereUniqueInput
}

input OrganizationalUnitCreateOneWithoutProcessesInput {
  create: OrganizationalUnitCreateWithoutProcessesInput
  connect: OrganizationalUnitWhereUniqueInput
}

input OrganizationalUnitCreateWithoutBusinessRolesInput {
  id: ID
  name: String!
  description: String
  children: OrganizationalUnitCreateManyWithoutParentInput
  parent: OrganizationalUnitCreateOneWithoutChildrenInput
  processes: ProcessCreateManyWithoutOrganizationalUnitInput
  organizationalUnitType: OrganizationalUnitTypeCreateOneWithoutOrganizationalUnitInput
}

input OrganizationalUnitCreateWithoutChildrenInput {
  id: ID
  name: String!
  description: String
  parent: OrganizationalUnitCreateOneWithoutChildrenInput
  processes: ProcessCreateManyWithoutOrganizationalUnitInput
  businessRoles: BusinessRoleCreateManyWithoutOrganizationalUnitInput
  organizationalUnitType: OrganizationalUnitTypeCreateOneWithoutOrganizationalUnitInput
}

input OrganizationalUnitCreateWithoutOrganizationalUnitTypeInput {
  id: ID
  name: String!
  description: String
  children: OrganizationalUnitCreateManyWithoutParentInput
  parent: OrganizationalUnitCreateOneWithoutChildrenInput
  processes: ProcessCreateManyWithoutOrganizationalUnitInput
  businessRoles: BusinessRoleCreateManyWithoutOrganizationalUnitInput
}

input OrganizationalUnitCreateWithoutParentInput {
  id: ID
  name: String!
  description: String
  children: OrganizationalUnitCreateManyWithoutParentInput
  processes: ProcessCreateManyWithoutOrganizationalUnitInput
  businessRoles: BusinessRoleCreateManyWithoutOrganizationalUnitInput
  organizationalUnitType: OrganizationalUnitTypeCreateOneWithoutOrganizationalUnitInput
}

input OrganizationalUnitCreateWithoutProcessesInput {
  id: ID
  name: String!
  description: String
  children: OrganizationalUnitCreateManyWithoutParentInput
  parent: OrganizationalUnitCreateOneWithoutChildrenInput
  businessRoles: BusinessRoleCreateManyWithoutOrganizationalUnitInput
  organizationalUnitType: OrganizationalUnitTypeCreateOneWithoutOrganizationalUnitInput
}

type OrganizationalUnitEdge {
  node: OrganizationalUnit!
  cursor: String!
}

enum OrganizationalUnitOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OrganizationalUnitPreviousValues {
  id: ID!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input OrganizationalUnitScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [OrganizationalUnitScalarWhereInput!]
  OR: [OrganizationalUnitScalarWhereInput!]
  NOT: [OrganizationalUnitScalarWhereInput!]
}

type OrganizationalUnitSubscriptionPayload {
  mutation: MutationType!
  node: OrganizationalUnit
  updatedFields: [String!]
  previousValues: OrganizationalUnitPreviousValues
}

input OrganizationalUnitSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrganizationalUnitWhereInput
  AND: [OrganizationalUnitSubscriptionWhereInput!]
  OR: [OrganizationalUnitSubscriptionWhereInput!]
  NOT: [OrganizationalUnitSubscriptionWhereInput!]
}

type OrganizationalUnitType {
  id: ID!
  name: String!
  description: String
  reportingUnit: Boolean
  organizationalUnit(where: OrganizationalUnitWhereInput, orderBy: OrganizationalUnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrganizationalUnit!]
}

type OrganizationalUnitTypeConnection {
  pageInfo: PageInfo!
  edges: [OrganizationalUnitTypeEdge]!
  aggregate: AggregateOrganizationalUnitType!
}

input OrganizationalUnitTypeCreateInput {
  id: ID
  name: String!
  description: String
  reportingUnit: Boolean
  organizationalUnit: OrganizationalUnitCreateManyWithoutOrganizationalUnitTypeInput
}

input OrganizationalUnitTypeCreateOneWithoutOrganizationalUnitInput {
  create: OrganizationalUnitTypeCreateWithoutOrganizationalUnitInput
  connect: OrganizationalUnitTypeWhereUniqueInput
}

input OrganizationalUnitTypeCreateWithoutOrganizationalUnitInput {
  id: ID
  name: String!
  description: String
  reportingUnit: Boolean
}

type OrganizationalUnitTypeEdge {
  node: OrganizationalUnitType!
  cursor: String!
}

enum OrganizationalUnitTypeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  reportingUnit_ASC
  reportingUnit_DESC
}

type OrganizationalUnitTypePreviousValues {
  id: ID!
  name: String!
  description: String
  reportingUnit: Boolean
}

type OrganizationalUnitTypeSubscriptionPayload {
  mutation: MutationType!
  node: OrganizationalUnitType
  updatedFields: [String!]
  previousValues: OrganizationalUnitTypePreviousValues
}

input OrganizationalUnitTypeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrganizationalUnitTypeWhereInput
  AND: [OrganizationalUnitTypeSubscriptionWhereInput!]
  OR: [OrganizationalUnitTypeSubscriptionWhereInput!]
  NOT: [OrganizationalUnitTypeSubscriptionWhereInput!]
}

input OrganizationalUnitTypeUpdateInput {
  name: String
  description: String
  reportingUnit: Boolean
  organizationalUnit: OrganizationalUnitUpdateManyWithoutOrganizationalUnitTypeInput
}

input OrganizationalUnitTypeUpdateManyMutationInput {
  name: String
  description: String
  reportingUnit: Boolean
}

input OrganizationalUnitTypeUpdateOneWithoutOrganizationalUnitInput {
  create: OrganizationalUnitTypeCreateWithoutOrganizationalUnitInput
  update: OrganizationalUnitTypeUpdateWithoutOrganizationalUnitDataInput
  upsert: OrganizationalUnitTypeUpsertWithoutOrganizationalUnitInput
  delete: Boolean
  disconnect: Boolean
  connect: OrganizationalUnitTypeWhereUniqueInput
}

input OrganizationalUnitTypeUpdateWithoutOrganizationalUnitDataInput {
  name: String
  description: String
  reportingUnit: Boolean
}

input OrganizationalUnitTypeUpsertWithoutOrganizationalUnitInput {
  update: OrganizationalUnitTypeUpdateWithoutOrganizationalUnitDataInput!
  create: OrganizationalUnitTypeCreateWithoutOrganizationalUnitInput!
}

input OrganizationalUnitTypeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  reportingUnit: Boolean
  reportingUnit_not: Boolean
  organizationalUnit_every: OrganizationalUnitWhereInput
  organizationalUnit_some: OrganizationalUnitWhereInput
  organizationalUnit_none: OrganizationalUnitWhereInput
  AND: [OrganizationalUnitTypeWhereInput!]
  OR: [OrganizationalUnitTypeWhereInput!]
  NOT: [OrganizationalUnitTypeWhereInput!]
}

input OrganizationalUnitTypeWhereUniqueInput {
  id: ID
}

input OrganizationalUnitUpdateInput {
  name: String
  description: String
  children: OrganizationalUnitUpdateManyWithoutParentInput
  parent: OrganizationalUnitUpdateOneWithoutChildrenInput
  processes: ProcessUpdateManyWithoutOrganizationalUnitInput
  businessRoles: BusinessRoleUpdateManyWithoutOrganizationalUnitInput
  organizationalUnitType: OrganizationalUnitTypeUpdateOneWithoutOrganizationalUnitInput
}

input OrganizationalUnitUpdateManyDataInput {
  name: String
  description: String
}

input OrganizationalUnitUpdateManyMutationInput {
  name: String
  description: String
}

input OrganizationalUnitUpdateManyWithoutOrganizationalUnitTypeInput {
  create: [OrganizationalUnitCreateWithoutOrganizationalUnitTypeInput!]
  delete: [OrganizationalUnitWhereUniqueInput!]
  connect: [OrganizationalUnitWhereUniqueInput!]
  set: [OrganizationalUnitWhereUniqueInput!]
  disconnect: [OrganizationalUnitWhereUniqueInput!]
  update: [OrganizationalUnitUpdateWithWhereUniqueWithoutOrganizationalUnitTypeInput!]
  upsert: [OrganizationalUnitUpsertWithWhereUniqueWithoutOrganizationalUnitTypeInput!]
  deleteMany: [OrganizationalUnitScalarWhereInput!]
  updateMany: [OrganizationalUnitUpdateManyWithWhereNestedInput!]
}

input OrganizationalUnitUpdateManyWithoutParentInput {
  create: [OrganizationalUnitCreateWithoutParentInput!]
  delete: [OrganizationalUnitWhereUniqueInput!]
  connect: [OrganizationalUnitWhereUniqueInput!]
  set: [OrganizationalUnitWhereUniqueInput!]
  disconnect: [OrganizationalUnitWhereUniqueInput!]
  update: [OrganizationalUnitUpdateWithWhereUniqueWithoutParentInput!]
  upsert: [OrganizationalUnitUpsertWithWhereUniqueWithoutParentInput!]
  deleteMany: [OrganizationalUnitScalarWhereInput!]
  updateMany: [OrganizationalUnitUpdateManyWithWhereNestedInput!]
}

input OrganizationalUnitUpdateManyWithWhereNestedInput {
  where: OrganizationalUnitScalarWhereInput!
  data: OrganizationalUnitUpdateManyDataInput!
}

input OrganizationalUnitUpdateOneRequiredWithoutBusinessRolesInput {
  create: OrganizationalUnitCreateWithoutBusinessRolesInput
  update: OrganizationalUnitUpdateWithoutBusinessRolesDataInput
  upsert: OrganizationalUnitUpsertWithoutBusinessRolesInput
  connect: OrganizationalUnitWhereUniqueInput
}

input OrganizationalUnitUpdateOneWithoutChildrenInput {
  create: OrganizationalUnitCreateWithoutChildrenInput
  update: OrganizationalUnitUpdateWithoutChildrenDataInput
  upsert: OrganizationalUnitUpsertWithoutChildrenInput
  delete: Boolean
  disconnect: Boolean
  connect: OrganizationalUnitWhereUniqueInput
}

input OrganizationalUnitUpdateOneWithoutProcessesInput {
  create: OrganizationalUnitCreateWithoutProcessesInput
  update: OrganizationalUnitUpdateWithoutProcessesDataInput
  upsert: OrganizationalUnitUpsertWithoutProcessesInput
  delete: Boolean
  disconnect: Boolean
  connect: OrganizationalUnitWhereUniqueInput
}

input OrganizationalUnitUpdateWithoutBusinessRolesDataInput {
  name: String
  description: String
  children: OrganizationalUnitUpdateManyWithoutParentInput
  parent: OrganizationalUnitUpdateOneWithoutChildrenInput
  processes: ProcessUpdateManyWithoutOrganizationalUnitInput
  organizationalUnitType: OrganizationalUnitTypeUpdateOneWithoutOrganizationalUnitInput
}

input OrganizationalUnitUpdateWithoutChildrenDataInput {
  name: String
  description: String
  parent: OrganizationalUnitUpdateOneWithoutChildrenInput
  processes: ProcessUpdateManyWithoutOrganizationalUnitInput
  businessRoles: BusinessRoleUpdateManyWithoutOrganizationalUnitInput
  organizationalUnitType: OrganizationalUnitTypeUpdateOneWithoutOrganizationalUnitInput
}

input OrganizationalUnitUpdateWithoutOrganizationalUnitTypeDataInput {
  name: String
  description: String
  children: OrganizationalUnitUpdateManyWithoutParentInput
  parent: OrganizationalUnitUpdateOneWithoutChildrenInput
  processes: ProcessUpdateManyWithoutOrganizationalUnitInput
  businessRoles: BusinessRoleUpdateManyWithoutOrganizationalUnitInput
}

input OrganizationalUnitUpdateWithoutParentDataInput {
  name: String
  description: String
  children: OrganizationalUnitUpdateManyWithoutParentInput
  processes: ProcessUpdateManyWithoutOrganizationalUnitInput
  businessRoles: BusinessRoleUpdateManyWithoutOrganizationalUnitInput
  organizationalUnitType: OrganizationalUnitTypeUpdateOneWithoutOrganizationalUnitInput
}

input OrganizationalUnitUpdateWithoutProcessesDataInput {
  name: String
  description: String
  children: OrganizationalUnitUpdateManyWithoutParentInput
  parent: OrganizationalUnitUpdateOneWithoutChildrenInput
  businessRoles: BusinessRoleUpdateManyWithoutOrganizationalUnitInput
  organizationalUnitType: OrganizationalUnitTypeUpdateOneWithoutOrganizationalUnitInput
}

input OrganizationalUnitUpdateWithWhereUniqueWithoutOrganizationalUnitTypeInput {
  where: OrganizationalUnitWhereUniqueInput!
  data: OrganizationalUnitUpdateWithoutOrganizationalUnitTypeDataInput!
}

input OrganizationalUnitUpdateWithWhereUniqueWithoutParentInput {
  where: OrganizationalUnitWhereUniqueInput!
  data: OrganizationalUnitUpdateWithoutParentDataInput!
}

input OrganizationalUnitUpsertWithoutBusinessRolesInput {
  update: OrganizationalUnitUpdateWithoutBusinessRolesDataInput!
  create: OrganizationalUnitCreateWithoutBusinessRolesInput!
}

input OrganizationalUnitUpsertWithoutChildrenInput {
  update: OrganizationalUnitUpdateWithoutChildrenDataInput!
  create: OrganizationalUnitCreateWithoutChildrenInput!
}

input OrganizationalUnitUpsertWithoutProcessesInput {
  update: OrganizationalUnitUpdateWithoutProcessesDataInput!
  create: OrganizationalUnitCreateWithoutProcessesInput!
}

input OrganizationalUnitUpsertWithWhereUniqueWithoutOrganizationalUnitTypeInput {
  where: OrganizationalUnitWhereUniqueInput!
  update: OrganizationalUnitUpdateWithoutOrganizationalUnitTypeDataInput!
  create: OrganizationalUnitCreateWithoutOrganizationalUnitTypeInput!
}

input OrganizationalUnitUpsertWithWhereUniqueWithoutParentInput {
  where: OrganizationalUnitWhereUniqueInput!
  update: OrganizationalUnitUpdateWithoutParentDataInput!
  create: OrganizationalUnitCreateWithoutParentInput!
}

input OrganizationalUnitWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  children_every: OrganizationalUnitWhereInput
  children_some: OrganizationalUnitWhereInput
  children_none: OrganizationalUnitWhereInput
  parent: OrganizationalUnitWhereInput
  processes_every: ProcessWhereInput
  processes_some: ProcessWhereInput
  processes_none: ProcessWhereInput
  businessRoles_every: BusinessRoleWhereInput
  businessRoles_some: BusinessRoleWhereInput
  businessRoles_none: BusinessRoleWhereInput
  organizationalUnitType: OrganizationalUnitTypeWhereInput
  AND: [OrganizationalUnitWhereInput!]
  OR: [OrganizationalUnitWhereInput!]
  NOT: [OrganizationalUnitWhereInput!]
}

input OrganizationalUnitWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum PERMISSION {
  ADMIN
  AUDIT
}

type Person {
  id: ID!
  name: String!
  surname: String
  user: User
  roles(where: BusinessRoleWhereInput, orderBy: BusinessRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BusinessRole!]
}

type PersonConnection {
  pageInfo: PageInfo!
  edges: [PersonEdge]!
  aggregate: AggregatePerson!
}

input PersonCreateInput {
  id: ID
  name: String!
  surname: String
  user: UserCreateOneWithoutPersonInput
  roles: BusinessRoleCreateManyWithoutPersonInput
}

input PersonCreateOneWithoutRolesInput {
  create: PersonCreateWithoutRolesInput
  connect: PersonWhereUniqueInput
}

input PersonCreateOneWithoutUserInput {
  create: PersonCreateWithoutUserInput
  connect: PersonWhereUniqueInput
}

input PersonCreateWithoutRolesInput {
  id: ID
  name: String!
  surname: String
  user: UserCreateOneWithoutPersonInput
}

input PersonCreateWithoutUserInput {
  id: ID
  name: String!
  surname: String
  roles: BusinessRoleCreateManyWithoutPersonInput
}

type PersonEdge {
  node: Person!
  cursor: String!
}

enum PersonOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  surname_ASC
  surname_DESC
}

type PersonPreviousValues {
  id: ID!
  name: String!
  surname: String
}

type PersonSubscriptionPayload {
  mutation: MutationType!
  node: Person
  updatedFields: [String!]
  previousValues: PersonPreviousValues
}

input PersonSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PersonWhereInput
  AND: [PersonSubscriptionWhereInput!]
  OR: [PersonSubscriptionWhereInput!]
  NOT: [PersonSubscriptionWhereInput!]
}

input PersonUpdateInput {
  name: String
  surname: String
  user: UserUpdateOneWithoutPersonInput
  roles: BusinessRoleUpdateManyWithoutPersonInput
}

input PersonUpdateManyMutationInput {
  name: String
  surname: String
}

input PersonUpdateOneWithoutRolesInput {
  create: PersonCreateWithoutRolesInput
  update: PersonUpdateWithoutRolesDataInput
  upsert: PersonUpsertWithoutRolesInput
  delete: Boolean
  disconnect: Boolean
  connect: PersonWhereUniqueInput
}

input PersonUpdateOneWithoutUserInput {
  create: PersonCreateWithoutUserInput
  update: PersonUpdateWithoutUserDataInput
  upsert: PersonUpsertWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  connect: PersonWhereUniqueInput
}

input PersonUpdateWithoutRolesDataInput {
  name: String
  surname: String
  user: UserUpdateOneWithoutPersonInput
}

input PersonUpdateWithoutUserDataInput {
  name: String
  surname: String
  roles: BusinessRoleUpdateManyWithoutPersonInput
}

input PersonUpsertWithoutRolesInput {
  update: PersonUpdateWithoutRolesDataInput!
  create: PersonCreateWithoutRolesInput!
}

input PersonUpsertWithoutUserInput {
  update: PersonUpdateWithoutUserDataInput!
  create: PersonCreateWithoutUserInput!
}

input PersonWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  surname: String
  surname_not: String
  surname_in: [String!]
  surname_not_in: [String!]
  surname_lt: String
  surname_lte: String
  surname_gt: String
  surname_gte: String
  surname_contains: String
  surname_not_contains: String
  surname_starts_with: String
  surname_not_starts_with: String
  surname_ends_with: String
  surname_not_ends_with: String
  user: UserWhereInput
  roles_every: BusinessRoleWhereInput
  roles_some: BusinessRoleWhereInput
  roles_none: BusinessRoleWhereInput
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
}

input PersonWhereUniqueInput {
  id: ID
}

type Process {
  id: ID!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  organizationalUnit: OrganizationalUnit
  processingActivities(where: ProcessingActivityWhereInput, orderBy: ProcessingActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProcessingActivity!]
  processOwner: BusinessRole
}

type ProcessConnection {
  pageInfo: PageInfo!
  edges: [ProcessEdge]!
  aggregate: AggregateProcess!
}

input ProcessCreateInput {
  id: ID
  name: String!
  description: String
  organizationalUnit: OrganizationalUnitCreateOneWithoutProcessesInput
  processingActivities: ProcessingActivityCreateManyWithoutProcessInput
  processOwner: BusinessRoleCreateOneWithoutProcessInput
}

input ProcessCreateManyWithoutOrganizationalUnitInput {
  create: [ProcessCreateWithoutOrganizationalUnitInput!]
  connect: [ProcessWhereUniqueInput!]
}

input ProcessCreateManyWithoutProcessOwnerInput {
  create: [ProcessCreateWithoutProcessOwnerInput!]
  connect: [ProcessWhereUniqueInput!]
}

input ProcessCreateOneWithoutProcessingActivitiesInput {
  create: ProcessCreateWithoutProcessingActivitiesInput
  connect: ProcessWhereUniqueInput
}

input ProcessCreateWithoutOrganizationalUnitInput {
  id: ID
  name: String!
  description: String
  processingActivities: ProcessingActivityCreateManyWithoutProcessInput
  processOwner: BusinessRoleCreateOneWithoutProcessInput
}

input ProcessCreateWithoutProcessingActivitiesInput {
  id: ID
  name: String!
  description: String
  organizationalUnit: OrganizationalUnitCreateOneWithoutProcessesInput
  processOwner: BusinessRoleCreateOneWithoutProcessInput
}

input ProcessCreateWithoutProcessOwnerInput {
  id: ID
  name: String!
  description: String
  organizationalUnit: OrganizationalUnitCreateOneWithoutProcessesInput
  processingActivities: ProcessingActivityCreateManyWithoutProcessInput
}

type ProcessEdge {
  node: Process!
  cursor: String!
}

type ProcessingActivity {
  id: ID!
  name: String!
  description: String
  purpose: String
  createdAt: DateTime!
  updatedAt: DateTime!
  process: Process
  applications(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Application!]
}

type ProcessingActivityConnection {
  pageInfo: PageInfo!
  edges: [ProcessingActivityEdge]!
  aggregate: AggregateProcessingActivity!
}

input ProcessingActivityCreateInput {
  id: ID
  name: String!
  description: String
  purpose: String
  process: ProcessCreateOneWithoutProcessingActivitiesInput
  applications: ApplicationCreateManyWithoutProcessingActivitiesInput
}

input ProcessingActivityCreateManyWithoutApplicationsInput {
  create: [ProcessingActivityCreateWithoutApplicationsInput!]
  connect: [ProcessingActivityWhereUniqueInput!]
}

input ProcessingActivityCreateManyWithoutProcessInput {
  create: [ProcessingActivityCreateWithoutProcessInput!]
  connect: [ProcessingActivityWhereUniqueInput!]
}

input ProcessingActivityCreateWithoutApplicationsInput {
  id: ID
  name: String!
  description: String
  purpose: String
  process: ProcessCreateOneWithoutProcessingActivitiesInput
}

input ProcessingActivityCreateWithoutProcessInput {
  id: ID
  name: String!
  description: String
  purpose: String
  applications: ApplicationCreateManyWithoutProcessingActivitiesInput
}

type ProcessingActivityEdge {
  node: ProcessingActivity!
  cursor: String!
}

enum ProcessingActivityOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  purpose_ASC
  purpose_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProcessingActivityPreviousValues {
  id: ID!
  name: String!
  description: String
  purpose: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProcessingActivityScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  purpose: String
  purpose_not: String
  purpose_in: [String!]
  purpose_not_in: [String!]
  purpose_lt: String
  purpose_lte: String
  purpose_gt: String
  purpose_gte: String
  purpose_contains: String
  purpose_not_contains: String
  purpose_starts_with: String
  purpose_not_starts_with: String
  purpose_ends_with: String
  purpose_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProcessingActivityScalarWhereInput!]
  OR: [ProcessingActivityScalarWhereInput!]
  NOT: [ProcessingActivityScalarWhereInput!]
}

type ProcessingActivitySubscriptionPayload {
  mutation: MutationType!
  node: ProcessingActivity
  updatedFields: [String!]
  previousValues: ProcessingActivityPreviousValues
}

input ProcessingActivitySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProcessingActivityWhereInput
  AND: [ProcessingActivitySubscriptionWhereInput!]
  OR: [ProcessingActivitySubscriptionWhereInput!]
  NOT: [ProcessingActivitySubscriptionWhereInput!]
}

input ProcessingActivityUpdateInput {
  name: String
  description: String
  purpose: String
  process: ProcessUpdateOneWithoutProcessingActivitiesInput
  applications: ApplicationUpdateManyWithoutProcessingActivitiesInput
}

input ProcessingActivityUpdateManyDataInput {
  name: String
  description: String
  purpose: String
}

input ProcessingActivityUpdateManyMutationInput {
  name: String
  description: String
  purpose: String
}

input ProcessingActivityUpdateManyWithoutApplicationsInput {
  create: [ProcessingActivityCreateWithoutApplicationsInput!]
  delete: [ProcessingActivityWhereUniqueInput!]
  connect: [ProcessingActivityWhereUniqueInput!]
  set: [ProcessingActivityWhereUniqueInput!]
  disconnect: [ProcessingActivityWhereUniqueInput!]
  update: [ProcessingActivityUpdateWithWhereUniqueWithoutApplicationsInput!]
  upsert: [ProcessingActivityUpsertWithWhereUniqueWithoutApplicationsInput!]
  deleteMany: [ProcessingActivityScalarWhereInput!]
  updateMany: [ProcessingActivityUpdateManyWithWhereNestedInput!]
}

input ProcessingActivityUpdateManyWithoutProcessInput {
  create: [ProcessingActivityCreateWithoutProcessInput!]
  delete: [ProcessingActivityWhereUniqueInput!]
  connect: [ProcessingActivityWhereUniqueInput!]
  set: [ProcessingActivityWhereUniqueInput!]
  disconnect: [ProcessingActivityWhereUniqueInput!]
  update: [ProcessingActivityUpdateWithWhereUniqueWithoutProcessInput!]
  upsert: [ProcessingActivityUpsertWithWhereUniqueWithoutProcessInput!]
  deleteMany: [ProcessingActivityScalarWhereInput!]
  updateMany: [ProcessingActivityUpdateManyWithWhereNestedInput!]
}

input ProcessingActivityUpdateManyWithWhereNestedInput {
  where: ProcessingActivityScalarWhereInput!
  data: ProcessingActivityUpdateManyDataInput!
}

input ProcessingActivityUpdateWithoutApplicationsDataInput {
  name: String
  description: String
  purpose: String
  process: ProcessUpdateOneWithoutProcessingActivitiesInput
}

input ProcessingActivityUpdateWithoutProcessDataInput {
  name: String
  description: String
  purpose: String
  applications: ApplicationUpdateManyWithoutProcessingActivitiesInput
}

input ProcessingActivityUpdateWithWhereUniqueWithoutApplicationsInput {
  where: ProcessingActivityWhereUniqueInput!
  data: ProcessingActivityUpdateWithoutApplicationsDataInput!
}

input ProcessingActivityUpdateWithWhereUniqueWithoutProcessInput {
  where: ProcessingActivityWhereUniqueInput!
  data: ProcessingActivityUpdateWithoutProcessDataInput!
}

input ProcessingActivityUpsertWithWhereUniqueWithoutApplicationsInput {
  where: ProcessingActivityWhereUniqueInput!
  update: ProcessingActivityUpdateWithoutApplicationsDataInput!
  create: ProcessingActivityCreateWithoutApplicationsInput!
}

input ProcessingActivityUpsertWithWhereUniqueWithoutProcessInput {
  where: ProcessingActivityWhereUniqueInput!
  update: ProcessingActivityUpdateWithoutProcessDataInput!
  create: ProcessingActivityCreateWithoutProcessInput!
}

input ProcessingActivityWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  purpose: String
  purpose_not: String
  purpose_in: [String!]
  purpose_not_in: [String!]
  purpose_lt: String
  purpose_lte: String
  purpose_gt: String
  purpose_gte: String
  purpose_contains: String
  purpose_not_contains: String
  purpose_starts_with: String
  purpose_not_starts_with: String
  purpose_ends_with: String
  purpose_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  process: ProcessWhereInput
  applications_every: ApplicationWhereInput
  applications_some: ApplicationWhereInput
  applications_none: ApplicationWhereInput
  AND: [ProcessingActivityWhereInput!]
  OR: [ProcessingActivityWhereInput!]
  NOT: [ProcessingActivityWhereInput!]
}

input ProcessingActivityWhereUniqueInput {
  id: ID
}

enum ProcessOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProcessPreviousValues {
  id: ID!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProcessScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProcessScalarWhereInput!]
  OR: [ProcessScalarWhereInput!]
  NOT: [ProcessScalarWhereInput!]
}

type ProcessSubscriptionPayload {
  mutation: MutationType!
  node: Process
  updatedFields: [String!]
  previousValues: ProcessPreviousValues
}

input ProcessSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProcessWhereInput
  AND: [ProcessSubscriptionWhereInput!]
  OR: [ProcessSubscriptionWhereInput!]
  NOT: [ProcessSubscriptionWhereInput!]
}

input ProcessUpdateInput {
  name: String
  description: String
  organizationalUnit: OrganizationalUnitUpdateOneWithoutProcessesInput
  processingActivities: ProcessingActivityUpdateManyWithoutProcessInput
  processOwner: BusinessRoleUpdateOneWithoutProcessInput
}

input ProcessUpdateManyDataInput {
  name: String
  description: String
}

input ProcessUpdateManyMutationInput {
  name: String
  description: String
}

input ProcessUpdateManyWithoutOrganizationalUnitInput {
  create: [ProcessCreateWithoutOrganizationalUnitInput!]
  delete: [ProcessWhereUniqueInput!]
  connect: [ProcessWhereUniqueInput!]
  set: [ProcessWhereUniqueInput!]
  disconnect: [ProcessWhereUniqueInput!]
  update: [ProcessUpdateWithWhereUniqueWithoutOrganizationalUnitInput!]
  upsert: [ProcessUpsertWithWhereUniqueWithoutOrganizationalUnitInput!]
  deleteMany: [ProcessScalarWhereInput!]
  updateMany: [ProcessUpdateManyWithWhereNestedInput!]
}

input ProcessUpdateManyWithoutProcessOwnerInput {
  create: [ProcessCreateWithoutProcessOwnerInput!]
  delete: [ProcessWhereUniqueInput!]
  connect: [ProcessWhereUniqueInput!]
  set: [ProcessWhereUniqueInput!]
  disconnect: [ProcessWhereUniqueInput!]
  update: [ProcessUpdateWithWhereUniqueWithoutProcessOwnerInput!]
  upsert: [ProcessUpsertWithWhereUniqueWithoutProcessOwnerInput!]
  deleteMany: [ProcessScalarWhereInput!]
  updateMany: [ProcessUpdateManyWithWhereNestedInput!]
}

input ProcessUpdateManyWithWhereNestedInput {
  where: ProcessScalarWhereInput!
  data: ProcessUpdateManyDataInput!
}

input ProcessUpdateOneWithoutProcessingActivitiesInput {
  create: ProcessCreateWithoutProcessingActivitiesInput
  update: ProcessUpdateWithoutProcessingActivitiesDataInput
  upsert: ProcessUpsertWithoutProcessingActivitiesInput
  delete: Boolean
  disconnect: Boolean
  connect: ProcessWhereUniqueInput
}

input ProcessUpdateWithoutOrganizationalUnitDataInput {
  name: String
  description: String
  processingActivities: ProcessingActivityUpdateManyWithoutProcessInput
  processOwner: BusinessRoleUpdateOneWithoutProcessInput
}

input ProcessUpdateWithoutProcessingActivitiesDataInput {
  name: String
  description: String
  organizationalUnit: OrganizationalUnitUpdateOneWithoutProcessesInput
  processOwner: BusinessRoleUpdateOneWithoutProcessInput
}

input ProcessUpdateWithoutProcessOwnerDataInput {
  name: String
  description: String
  organizationalUnit: OrganizationalUnitUpdateOneWithoutProcessesInput
  processingActivities: ProcessingActivityUpdateManyWithoutProcessInput
}

input ProcessUpdateWithWhereUniqueWithoutOrganizationalUnitInput {
  where: ProcessWhereUniqueInput!
  data: ProcessUpdateWithoutOrganizationalUnitDataInput!
}

input ProcessUpdateWithWhereUniqueWithoutProcessOwnerInput {
  where: ProcessWhereUniqueInput!
  data: ProcessUpdateWithoutProcessOwnerDataInput!
}

input ProcessUpsertWithoutProcessingActivitiesInput {
  update: ProcessUpdateWithoutProcessingActivitiesDataInput!
  create: ProcessCreateWithoutProcessingActivitiesInput!
}

input ProcessUpsertWithWhereUniqueWithoutOrganizationalUnitInput {
  where: ProcessWhereUniqueInput!
  update: ProcessUpdateWithoutOrganizationalUnitDataInput!
  create: ProcessCreateWithoutOrganizationalUnitInput!
}

input ProcessUpsertWithWhereUniqueWithoutProcessOwnerInput {
  where: ProcessWhereUniqueInput!
  update: ProcessUpdateWithoutProcessOwnerDataInput!
  create: ProcessCreateWithoutProcessOwnerInput!
}

input ProcessWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  organizationalUnit: OrganizationalUnitWhereInput
  processingActivities_every: ProcessingActivityWhereInput
  processingActivities_some: ProcessingActivityWhereInput
  processingActivities_none: ProcessingActivityWhereInput
  processOwner: BusinessRoleWhereInput
  AND: [ProcessWhereInput!]
  OR: [ProcessWhereInput!]
  NOT: [ProcessWhereInput!]
}

input ProcessWhereUniqueInput {
  id: ID
}

type QualityAttribute {
  id: ID!
  name: String!
  description: String
  appliesToObject: CLASSIFICATIONOBJECT!
  classificationLabels(where: ClassificationLabelWhereInput, orderBy: ClassificationLabelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ClassificationLabel!]
}

type QualityAttributeConnection {
  pageInfo: PageInfo!
  edges: [QualityAttributeEdge]!
  aggregate: AggregateQualityAttribute!
}

input QualityAttributeCreateInput {
  id: ID
  name: String!
  description: String
  appliesToObject: CLASSIFICATIONOBJECT!
  classificationLabels: ClassificationLabelCreateManyWithoutQualityAttributeInput
}

input QualityAttributeCreateOneWithoutClassificationLabelsInput {
  create: QualityAttributeCreateWithoutClassificationLabelsInput
  connect: QualityAttributeWhereUniqueInput
}

input QualityAttributeCreateWithoutClassificationLabelsInput {
  id: ID
  name: String!
  description: String
  appliesToObject: CLASSIFICATIONOBJECT!
}

type QualityAttributeEdge {
  node: QualityAttribute!
  cursor: String!
}

enum QualityAttributeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  appliesToObject_ASC
  appliesToObject_DESC
}

type QualityAttributePreviousValues {
  id: ID!
  name: String!
  description: String
  appliesToObject: CLASSIFICATIONOBJECT!
}

type QualityAttributeSubscriptionPayload {
  mutation: MutationType!
  node: QualityAttribute
  updatedFields: [String!]
  previousValues: QualityAttributePreviousValues
}

input QualityAttributeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QualityAttributeWhereInput
  AND: [QualityAttributeSubscriptionWhereInput!]
  OR: [QualityAttributeSubscriptionWhereInput!]
  NOT: [QualityAttributeSubscriptionWhereInput!]
}

input QualityAttributeUpdateInput {
  name: String
  description: String
  appliesToObject: CLASSIFICATIONOBJECT
  classificationLabels: ClassificationLabelUpdateManyWithoutQualityAttributeInput
}

input QualityAttributeUpdateManyMutationInput {
  name: String
  description: String
  appliesToObject: CLASSIFICATIONOBJECT
}

input QualityAttributeUpdateOneWithoutClassificationLabelsInput {
  create: QualityAttributeCreateWithoutClassificationLabelsInput
  update: QualityAttributeUpdateWithoutClassificationLabelsDataInput
  upsert: QualityAttributeUpsertWithoutClassificationLabelsInput
  delete: Boolean
  disconnect: Boolean
  connect: QualityAttributeWhereUniqueInput
}

input QualityAttributeUpdateWithoutClassificationLabelsDataInput {
  name: String
  description: String
  appliesToObject: CLASSIFICATIONOBJECT
}

input QualityAttributeUpsertWithoutClassificationLabelsInput {
  update: QualityAttributeUpdateWithoutClassificationLabelsDataInput!
  create: QualityAttributeCreateWithoutClassificationLabelsInput!
}

input QualityAttributeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  appliesToObject: CLASSIFICATIONOBJECT
  appliesToObject_not: CLASSIFICATIONOBJECT
  appliesToObject_in: [CLASSIFICATIONOBJECT!]
  appliesToObject_not_in: [CLASSIFICATIONOBJECT!]
  classificationLabels_every: ClassificationLabelWhereInput
  classificationLabels_some: ClassificationLabelWhereInput
  classificationLabels_none: ClassificationLabelWhereInput
  AND: [QualityAttributeWhereInput!]
  OR: [QualityAttributeWhereInput!]
  NOT: [QualityAttributeWhereInput!]
}

input QualityAttributeWhereUniqueInput {
  id: ID
}

type Query {
  application(where: ApplicationWhereUniqueInput!): Application
  applications(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Application]!
  applicationsConnection(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ApplicationConnection!
  businessRole(where: BusinessRoleWhereUniqueInput!): BusinessRole
  businessRoles(where: BusinessRoleWhereInput, orderBy: BusinessRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BusinessRole]!
  businessRolesConnection(where: BusinessRoleWhereInput, orderBy: BusinessRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BusinessRoleConnection!
  classificationLabel(where: ClassificationLabelWhereUniqueInput!): ClassificationLabel
  classificationLabels(where: ClassificationLabelWhereInput, orderBy: ClassificationLabelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ClassificationLabel]!
  classificationLabelsConnection(where: ClassificationLabelWhereInput, orderBy: ClassificationLabelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClassificationLabelConnection!
  dataType(where: DataTypeWhereUniqueInput!): DataType
  dataTypes(where: DataTypeWhereInput, orderBy: DataTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DataType]!
  dataTypesConnection(where: DataTypeWhereInput, orderBy: DataTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DataTypeConnection!
  organizationalUnit(where: OrganizationalUnitWhereUniqueInput!): OrganizationalUnit
  organizationalUnits(where: OrganizationalUnitWhereInput, orderBy: OrganizationalUnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrganizationalUnit]!
  organizationalUnitsConnection(where: OrganizationalUnitWhereInput, orderBy: OrganizationalUnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrganizationalUnitConnection!
  organizationalUnitType(where: OrganizationalUnitTypeWhereUniqueInput!): OrganizationalUnitType
  organizationalUnitTypes(where: OrganizationalUnitTypeWhereInput, orderBy: OrganizationalUnitTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrganizationalUnitType]!
  organizationalUnitTypesConnection(where: OrganizationalUnitTypeWhereInput, orderBy: OrganizationalUnitTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrganizationalUnitTypeConnection!
  person(where: PersonWhereUniqueInput!): Person
  persons(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Person]!
  personsConnection(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PersonConnection!
  process(where: ProcessWhereUniqueInput!): Process
  processes(where: ProcessWhereInput, orderBy: ProcessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Process]!
  processesConnection(where: ProcessWhereInput, orderBy: ProcessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProcessConnection!
  processingActivity(where: ProcessingActivityWhereUniqueInput!): ProcessingActivity
  processingActivities(where: ProcessingActivityWhereInput, orderBy: ProcessingActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProcessingActivity]!
  processingActivitiesConnection(where: ProcessingActivityWhereInput, orderBy: ProcessingActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProcessingActivityConnection!
  qualityAttribute(where: QualityAttributeWhereUniqueInput!): QualityAttribute
  qualityAttributes(where: QualityAttributeWhereInput, orderBy: QualityAttributeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QualityAttribute]!
  qualityAttributesConnection(where: QualityAttributeWhereInput, orderBy: QualityAttributeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QualityAttributeConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

enum RACI {
  RESPONDSABLE
  ACCOUNTABLE
  CONSULTED
  INFORMED
}

type Subscription {
  application(where: ApplicationSubscriptionWhereInput): ApplicationSubscriptionPayload
  businessRole(where: BusinessRoleSubscriptionWhereInput): BusinessRoleSubscriptionPayload
  classificationLabel(where: ClassificationLabelSubscriptionWhereInput): ClassificationLabelSubscriptionPayload
  dataType(where: DataTypeSubscriptionWhereInput): DataTypeSubscriptionPayload
  organizationalUnit(where: OrganizationalUnitSubscriptionWhereInput): OrganizationalUnitSubscriptionPayload
  organizationalUnitType(where: OrganizationalUnitTypeSubscriptionWhereInput): OrganizationalUnitTypeSubscriptionPayload
  person(where: PersonSubscriptionWhereInput): PersonSubscriptionPayload
  process(where: ProcessSubscriptionWhereInput): ProcessSubscriptionPayload
  processingActivity(where: ProcessingActivitySubscriptionWhereInput): ProcessingActivitySubscriptionPayload
  qualityAttribute(where: QualityAttributeSubscriptionWhereInput): QualityAttributeSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  password: String!
  active: Boolean
  specialPermissions: [PERMISSION!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  person: Person
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  password: String!
  active: Boolean
  specialPermissions: UserCreatespecialPermissionsInput
  person: PersonCreateOneWithoutUserInput
}

input UserCreateOneWithoutPersonInput {
  create: UserCreateWithoutPersonInput
  connect: UserWhereUniqueInput
}

input UserCreatespecialPermissionsInput {
  set: [PERMISSION!]
}

input UserCreateWithoutPersonInput {
  id: ID
  email: String!
  password: String!
  active: Boolean
  specialPermissions: UserCreatespecialPermissionsInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  active_ASC
  active_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  active: Boolean
  specialPermissions: [PERMISSION!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  password: String
  active: Boolean
  specialPermissions: UserUpdatespecialPermissionsInput
  person: PersonUpdateOneWithoutUserInput
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  active: Boolean
  specialPermissions: UserUpdatespecialPermissionsInput
}

input UserUpdateOneWithoutPersonInput {
  create: UserCreateWithoutPersonInput
  update: UserUpdateWithoutPersonDataInput
  upsert: UserUpsertWithoutPersonInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdatespecialPermissionsInput {
  set: [PERMISSION!]
}

input UserUpdateWithoutPersonDataInput {
  email: String
  password: String
  active: Boolean
  specialPermissions: UserUpdatespecialPermissionsInput
}

input UserUpsertWithoutPersonInput {
  update: UserUpdateWithoutPersonDataInput!
  create: UserCreateWithoutPersonInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  active: Boolean
  active_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  person: PersonWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`